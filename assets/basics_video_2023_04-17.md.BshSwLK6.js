import{_ as o,c as s,o as n,j as e,a as t}from"./chunks/framework.BfubPTv1.js";const m=JSON.parse('{"title":"Adding a feature to Gun-Vue p2p web app. QR Lab: code structure, development process and build steps","description":"","frontmatter":{"title":"Adding a feature to Gun-Vue p2p web app. QR Lab: code structure, development process and build steps","date":"2023-04-17T00:00:00.000Z","youtube":"bCiDZMXRheA","version":"0.15.1"},"headers":[],"relativePath":"basics/video/2023/04-17.md","filePath":"basics/video/2023/04-17.md"}'),i={name:"basics/video/2023/04-17.md"};function d(r,a,c,p,l,u){return n(),s("div",null,a[0]||(a[0]=[e("p",null,[t("Today we are adding a new feature to the app by expanding QR Code components section. We extract the basic logic from the LoadQR component to the "),e("code",null,"useQR"),t(" composable, then display all the components at app routes. Now anyone can start creating and parsing QR code immediately and completely client side. It's just bare bones start for a whole space of visual data transfer and verification (!). What about signed QR messages with delivery verification by certificates built right in the link?")],-1),e("p",null,[t("Also the "),e("code",null,"v.0.15.0"),t(" updated build system enables new ways of creating interactive docs with Vitepress. We just touched that topic now. This will be covered in next videos. So stay tuned!")],-1)]))}const f=o(i,[["render",d]]);export{m as __pageData,f as default};

const r=e=>btoa(String.fromCharCode(...e)).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,""),n=()=>crypto.getRandomValues(new Uint8Array(32));async function o(e){const a=`User ${new Date().toISOString().replace("T"," ").slice(0,16)}`,t={challenge:n(),rp:{name:"App"},user:{id:new Uint8Array(1),name:a,displayName:a},pubKeyCredParams:[{type:"public-key",alg:-7}],authenticatorSelection:{residentKey:"required",userVerification:"preferred"},attestation:"none",timeout:6e4},i=await navigator.credentials.create({publicKey:t});return{id:r(new Uint8Array(i.rawId))}}async function s(){const e={challenge:n(),userVerification:"preferred",timeout:6e4},a=await navigator.credentials.get({publicKey:e});return{id:r(new Uint8Array(a.rawId))}}export{o as c,s as g};

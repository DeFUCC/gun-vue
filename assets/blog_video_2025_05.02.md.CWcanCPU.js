import{_ as t,c as i,o as s,ag as a}from"./chunks/framework.ap9ZVjPY.js";const h=JSON.parse('{"title":"üîê Gun-Vue 0.24.2 Auth -  Encrypted Key Pairs, Derived Accounts & Peer Messaging!","description":"","frontmatter":{"title":"üîê Gun-Vue 0.24.2 Auth -  Encrypted Key Pairs, Derived Accounts & Peer Messaging!","date":"2025-05-02T00:00:00.000Z","youtube":"fXaQQ6rgjcE","version":"0.24.2"},"headers":[],"relativePath":"blog/video/2025/05.02.md","filePath":"blog/video/2025/05.02.md"}'),r={name:"blog/video/2025/05.02.md"};function n(o,e,l,p,d,u){return s(),i("div",null,e[0]||(e[0]=[a("<p>Welcome back! In this second part, Davay dives deep into Gun-Vue, the powerful front-end toolkit for building decentralized, encrypted, and offline-first web apps with Gun.js. Following the vibrant keypair avatars from Part 1, this episode shows how to derive, store, share, and authenticate identities‚Äîall using lightweight files and passkeys.</p><p>‚ú® What&#39;s Inside:</p><ul><li><p>Gun-Vue: one-file frontend toolkit (~1.7MB!) for peer-to-peer apps.</p></li><li><p>Create and share encrypted keypairs via WebKey or PNG avatars.</p></li><li><p>Instant login from links, QR codes, or local files.</p></li><li><p>Generate keys from custom passphrases (key derivation).</p></li><li><p>Send secure DMs using shared phrases with end-to-end encryption.</p></li><li><p>Works seamlessly in-browser or as a PWA (Progressive Web App).</p></li><li><p>Fully open source, modular, and available on NPM.</p></li></ul><p>Whether you‚Äôre building dApps, secure chat, or agent-based systems, Gun-Vue makes decentralized identity and communication ridiculously simple.</p>",4)]))}const f=t(r,[["render",n]]);export{h as __pageData,f as default};

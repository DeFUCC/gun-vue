"use strict";Object.defineProperty(exports, "__esModule", {value: true});



var _chunkRYT3GRM7js = require('./chunk-RYT3GRM7.js');

// src/index.ts
var _build = require('@iconify/utils/lib/svg/build');
var _customisations = require('@iconify/utils/lib/customisations');
var _geticon = require('@iconify/utils/lib/icon-set/get-icon');
var COLLECTION_NAME_PARTS_MAX = 3;
async function searchForIcon(collection, id, collections, scale) {
  let iconSet = collections[collection];
  if (typeof iconSet === "function")
    iconSet = await iconSet();
  if (!iconSet && _chunkRYT3GRM7js.isNode) {
    const { loadCollectionFromFS } = await Promise.resolve().then(() => require("./fs.js"));
    iconSet = await loadCollectionFromFS(collection);
  }
  if (!iconSet)
    return;
  const iconData = _geticon.getIconData.call(void 0, iconSet, id, true);
  if (iconData) {
    const { attributes, body } = _build.iconToSVG.call(void 0, iconData, {
      ..._customisations.defaults,
      height: `${scale}em`,
      width: `${scale}em`
    });
    return `<svg ${Object.entries(attributes).map((i) => `${i[0]}="${i[1]}"`).join(" ")}>${body}</svg>`;
  }
}
var preset = ({
  scale = 1,
  mode = "auto",
  prefix = "i-",
  warn = false,
  collections = {},
  extraProperties = {},
  layer = "icons"
} = {}) => {
  return {
    name: "@unocss/preset-icons",
    enforce: "pre",
    layers: {
      icons: -10
    },
    rules: [[
      new RegExp(`^${prefix}([a-z0-9:-]+)$`),
      async ([full, body]) => {
        let collection = "";
        let name = "";
        let svg;
        if (body.includes(":")) {
          [collection, name] = body.split(":");
          svg = await searchForIcon(collection, name, collections, scale);
        } else {
          const parts = body.split(/-/g);
          for (let i = COLLECTION_NAME_PARTS_MAX; i >= 1; i--) {
            collection = parts.slice(0, i).join("-");
            name = parts.slice(i).join("-");
            svg = await searchForIcon(collection, name, collections, scale);
            if (svg)
              break;
          }
        }
        if (!svg) {
          if (warn)
            _chunkRYT3GRM7js.warnOnce.call(void 0, `[unocss] failed to load icon "${full}"`);
          return;
        }
        let _mode = mode;
        if (_mode === "auto")
          _mode = svg.includes("currentColor") ? "mask" : "background-img";
        const url = `url("data:image/svg+xml;utf8,${_chunkRYT3GRM7js.encodeSvg.call(void 0, svg)}")`;
        if (_mode === "mask") {
          return {
            "--un-icon": url,
            "mask": "var(--un-icon) no-repeat",
            "mask-size": "100% 100%",
            "-webkit-mask": "var(--un-icon) no-repeat",
            "-webkit-mask-size": "100% 100%",
            "background-color": "currentColor",
            "height": `${scale}em`,
            "width": `${scale}em`,
            ...extraProperties
          };
        } else {
          return {
            "background": `${url} no-repeat`,
            "background-size": "100% 100%",
            "background-color": "transparent",
            "height": `${scale}em`,
            "width": `${scale}em`,
            ...extraProperties
          };
        }
      },
      { layer }
    ]]
  };
};
var src_default = preset;



exports.default = src_default; exports.preset = preset;

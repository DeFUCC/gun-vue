import {
  camelToKebab
} from "./chunk-DFWGO77D.mjs";
import "./chunk-QVRFTMN2.mjs";

// src/resolver.ts
import { toArray, uniq } from "@antfu/utils";

// src/core/collections.ts
var collections = ["mdi", "mdi-light", "ic", "ph", "icon-park-outline", "icon-park", "uil", "bx", "ri", "la", "iconoir", "jam", "ion", "bi", "clarity", "carbon", "cil", "gg", "tabler", "teenyicons", "fa-solid", "fa-regular", "vaadin", "icomoon-free", "eva", "pixelarticons", "majesticons", "ci", "eos-icons", "dashicons", "entypo", "zondicons", "flat-color-icons", "octicon", "codicon", "ant-design", "lucide", "fe", "radix-icons", "line-md", "system-uicons", "akar-icons", "uiw", "uim", "uit", "uis", "gridicons", "mono-icons", "heroicons-outline", "heroicons-solid", "file-icons", "mi", "ps", "el", "foundation", "typcn", "subway", "raphael", "icons8", "wpf", "iwwa", "topcoat", "ei", "bytesize", "fluent", "grommet-icons", "pepicons", "maki", "oi", "et", "vscode-icons", "fontisto", "fa", "zmdi", "whh", "si-glyph", "ls", "simple-line-icons", "flat-ui", "vs", "websymbol", "il", "bpmn", "fontelico", "feather", "noto", "noto-v1", "twemoji", "openmoji", "emojione", "emojione-monotone", "emojione-v1", "fxemoji", "logos", "cib", "simple-icons", "fa-brands", "brandico", "entypo-social", "cryptocurrency", "gis", "map", "geo", "cif", "fad", "wi", "healthicons", "medical-icon"];

// src/resolver.ts
function ComponentsResolver(options = {}) {
  var _a;
  const {
    prefix: rawPrefix = (_a = options.componentPrefix) != null ? _a : "i",
    enabledCollections = collections,
    alias = {},
    customCollections = [],
    extension
  } = options;
  const prefix = rawPrefix ? `${camelToKebab(rawPrefix)}-` : "";
  const ext = extension ? extension.startsWith(".") ? extension : `.${extension}` : "";
  const collections2 = uniq([
    ...toArray(enabledCollections),
    ...toArray(customCollections),
    ...toArray(Object.keys(alias))
  ]);
  collections2.sort((a, b) => b.length - a.length);
  return (name) => {
    const kebab = camelToKebab(name);
    if (!kebab.startsWith(prefix))
      return;
    const slice = kebab.slice(prefix.length);
    const collection = collections2.find((i) => slice.startsWith(`${i}-`)) || collections2.find((i) => slice.startsWith(i));
    if (!collection)
      return;
    let icon = slice.slice(collection.length);
    if (icon[0] === "-")
      icon = icon.slice(1);
    if (!icon)
      return;
    const resolvedCollection = alias[collection] || collection;
    if (collections2.includes(resolvedCollection))
      return `~icons/${resolvedCollection}/${icon}${ext}`;
  };
}
export {
  ComponentsResolver as default
};

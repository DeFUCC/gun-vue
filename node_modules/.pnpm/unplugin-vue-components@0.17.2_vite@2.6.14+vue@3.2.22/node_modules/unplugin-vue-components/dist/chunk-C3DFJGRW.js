"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }










var _chunkLWMWOXVQjs = require('./chunk-LWMWOXVQ.js');





var _chunk7T67WII5js = require('./chunk-7T67WII5.js');

// src/index.ts
_chunk7T67WII5js.init_cjs_shims.call(void 0, );

// src/core/unplugin.ts
_chunk7T67WII5js.init_cjs_shims.call(void 0, );
var _unplugin = require('unplugin');
var _pluginutils = require('@rollup/pluginutils');
var _chokidar = require('chokidar'); var _chokidar2 = _interopRequireDefault(_chokidar);

// src/core/context.ts
_chunk7T67WII5js.init_cjs_shims.call(void 0, );
var _path = require('path');
var _debug = require('debug'); var _debug2 = _interopRequireDefault(_debug);
var _utils = require('@antfu/utils');

// src/core/options.ts
_chunk7T67WII5js.init_cjs_shims.call(void 0, );


var _localpkg = require('local-pkg');
var defaultOptions = {
  dirs: "src/components",
  extensions: "vue",
  deep: true,
  dts: _localpkg.isPackageExists.call(void 0, "typescript"),
  directoryAsNamespace: false,
  globalNamespaces: [],
  libraries: [],
  resolvers: [],
  importPathTransform: (v) => v,
  allowOverrides: false
};
function normalizeResolvers(resolvers) {
  return _utils.toArray.call(void 0, resolvers).flat().map((r) => typeof r === "function" ? { resolve: r, type: "component" } : r);
}
function resolveOptions(options, root) {
  const resolved = Object.assign({}, defaultOptions, options);
  resolved.libraries = _utils.toArray.call(void 0, resolved.libraries).map((i) => typeof i === "string" ? { name: i } : i);
  resolved.resolvers = normalizeResolvers(resolved.resolvers);
  resolved.resolvers.push(...resolved.libraries.map((lib) => _chunkLWMWOXVQjs.LibraryResolver.call(void 0, lib)));
  resolved.extensions = _utils.toArray.call(void 0, resolved.extensions);
  if (resolved.globs) {
    resolved.globs = _utils.toArray.call(void 0, resolved.globs).map((glob) => _utils.slash.call(void 0, _path.resolve.call(void 0, root, glob)));
  } else {
    const extsGlob = resolved.extensions.length === 1 ? resolved.extensions : `{${resolved.extensions.join(",")}}`;
    resolved.dirs = _utils.toArray.call(void 0, resolved.dirs);
    resolved.resolvedDirs = resolved.dirs.map((i) => _utils.slash.call(void 0, _path.resolve.call(void 0, root, i)));
    resolved.globs = resolved.resolvedDirs.map((i) => resolved.deep ? _utils.slash.call(void 0, _path.join.call(void 0, i, `**/*.${extsGlob}`)) : _utils.slash.call(void 0, _path.join.call(void 0, i, `*.${extsGlob}`)));
    if (!resolved.extensions.length)
      throw new Error("[unplugin-vue-components] `extensions` option is required to search for components");
  }
  resolved.dts = !options.dts ? false : _path.resolve.call(void 0, root, typeof options.dts === "string" ? options.dts : "components.d.ts");
  resolved.root = root;
  resolved.transformer = options.transformer || getVueVersion() || "vue3";
  resolved.directives = typeof options.directives === "boolean" ? options.directives : !resolved.resolvers.some((i) => i.type === "directive") ? false : getVueVersion() === "vue3";
  return resolved;
}
function getVueVersion() {
  var _a;
  try {
    const vue = _chunk7T67WII5js.__require.call(void 0, "vue");
    const version = ((_a = vue == null ? void 0 : vue.default) == null ? void 0 : _a.version) || (vue == null ? void 0 : vue.version) || "3";
    return version.startsWith("2.") ? "vue2" : "vue3";
  } catch (e2) {
    return null;
  }
}

// src/core/fs/glob.ts
_chunk7T67WII5js.init_cjs_shims.call(void 0, );
var _fastglob = require('fast-glob'); var _fastglob2 = _interopRequireDefault(_fastglob);

var debug = _debug2.default.call(void 0, "unplugin-vue-components:glob");
function searchComponents(ctx) {
  var _a;
  debug(`started with: [${ctx.options.globs.join(", ")}]`);
  const root = ctx.root;
  const files = _fastglob2.default.sync(ctx.options.globs, {
    ignore: ["node_modules"],
    onlyFiles: true,
    cwd: root,
    absolute: true
  });
  if (!files.length && !((_a = ctx.options.resolvers) == null ? void 0 : _a.length))
    console.warn("[unplugin-vue-components] no components found");
  debug(`${files.length} components found.`);
  ctx.addComponents(files);
}

// src/core/declaration.ts
_chunk7T67WII5js.init_cjs_shims.call(void 0, );

var _fs = require('fs');

function parseDeclaration(code) {
  if (!code)
    return {};
  return Object.fromEntries(Array.from(code.matchAll(/(?<!\/\/)\s+\s+['"]?(.+?)['"]?:\s(.+?)\n/g)).map((i) => [i[1], i[2]]));
}
async function generateDeclaration(ctx, root, filepath) {
  const imports = Object.fromEntries(Object.values(_chunk7T67WII5js.__spreadValues.call(void 0, _chunk7T67WII5js.__spreadValues.call(void 0, {}, ctx.componentNameMap), ctx.componentCustomMap)).map(({ path, name, importName }) => {
    if (!name)
      return void 0;
    path = _chunkLWMWOXVQjs.getTransformedPath.call(void 0, path, ctx);
    const related = _path.isAbsolute.call(void 0, path) ? `./${_path.relative.call(void 0, _path.dirname.call(void 0, filepath), path)}` : path;
    let entry = `typeof import('${_utils.slash.call(void 0, related)}')`;
    if (importName)
      entry += `['${importName}']`;
    else
      entry += "['default']";
    return [name, entry];
  }).filter(_utils.notNullish));
  if (!Object.keys(imports).length)
    return;
  const originalContent = _fs.existsSync.call(void 0, filepath) ? await _fs.promises.readFile(filepath, "utf-8") : "";
  const originalImports = parseDeclaration(originalContent);
  const lines = Object.entries(_chunk7T67WII5js.__spreadValues.call(void 0, _chunk7T67WII5js.__spreadValues.call(void 0, {}, originalImports), imports)).sort((a, b) => a[0].localeCompare(b[0])).map(([name, v]) => {
    if (!/^\w+$/.test(name))
      name = `'${name}'`;
    return `${name}: ${v}`;
  });
  const code = `// generated by unplugin-vue-components
// We suggest you to commit this file into source control
// Read more: https://github.com/vuejs/vue-next/pull/3399

declare module 'vue' {
  export interface GlobalComponents {
    ${lines.join("\n    ")}
  }
}

export { }
`;
  if (code !== originalContent)
    await _fs.promises.writeFile(filepath, code, "utf-8");
}

// src/core/transformer.ts
_chunk7T67WII5js.init_cjs_shims.call(void 0, );

var _magicstring = require('magic-string'); var _magicstring2 = _interopRequireDefault(_magicstring);

// src/core/transforms/component.ts
_chunk7T67WII5js.init_cjs_shims.call(void 0, );

var debug2 = _debug2.default.call(void 0, "unplugin-vue-components:transform:component");
var resolveVue2 = (code, s) => {
  const results = [];
  for (const match of code.matchAll(/_c\([\s\n\t]*['"](.+?)["']([,)])/g)) {
    const [full, matchedName, append] = match;
    if (match.index != null && matchedName && !matchedName.startsWith("_")) {
      const start = match.index;
      const end = start + full.length;
      results.push({
        rawName: matchedName,
        replace: (resolved) => s.overwrite(start, end, `_c(${resolved}${append}`)
      });
    }
  }
  return results;
};
var resolveVue3 = (code, s) => {
  const results = [];
  for (const match of code.matchAll(/_resolveComponent\("(.+?)"\)/g)) {
    const matchedName = match[1];
    if (match.index != null && matchedName && !matchedName.startsWith("_")) {
      const start = match.index;
      const end = start + match[0].length;
      results.push({
        rawName: matchedName,
        replace: (resolved) => s.overwrite(start, end, resolved)
      });
    }
  }
  return results;
};
async function transformComponent(code, transformer, s, ctx, sfcPath) {
  let no = 0;
  const results = transformer === "vue2" ? resolveVue2(code, s) : resolveVue3(code, s);
  for (const { rawName, replace } of results) {
    debug2(`| ${rawName}`);
    const name = _chunkLWMWOXVQjs.pascalCase.call(void 0, rawName);
    ctx.updateUsageMap(sfcPath, [name]);
    const component = await ctx.findComponent(name, "component", [sfcPath]);
    if (component) {
      const varName = `__unplugin_components_${no}`;
      s.prepend(`${_chunkLWMWOXVQjs.stringifyComponentImport.call(void 0, _chunk7T67WII5js.__spreadProps.call(void 0, _chunk7T67WII5js.__spreadValues.call(void 0, {}, component), { name: varName }), ctx)};
`);
      no += 1;
      replace(varName);
    }
  }
  debug2(`^ (${no})`);
}

// src/core/transforms/directive/index.ts
_chunk7T67WII5js.init_cjs_shims.call(void 0, );


// src/core/transforms/directive/vue2.ts
_chunk7T67WII5js.init_cjs_shims.call(void 0, );

var getRenderFnStart = (ast) => {
  const renderFn = ast.program.body.find((node) => node.type === "VariableDeclaration" && node.declarations[0].id.type === "Identifier" && node.declarations[0].id.name === "render");
  const start = (renderFn == null ? void 0 : renderFn.declarations[0].init).body.start;
  if (start === null)
    throw new Error("[unplugin-vue-components:directive] Cannot find render function position.");
  return start + 1;
};
async function resolveVue22(code, s) {
  var _a, _b;
  if (!_localpkg.isPackageExists.call(void 0, "@babel/parser") || !_localpkg.isPackageExists.call(void 0, "@babel/traverse"))
    throw new Error('[unplugin-vue-components:directive] To use Vue 2 directive you will need to install Babel first: "npm install -D @babel/parser @babel/traverse"');
  const { parse } = await _localpkg.importModule.call(void 0, "@babel/parser");
  const ast = parse(code, {
    sourceType: "module"
  });
  const nodes = [];
  const { default: traverse } = await _localpkg.importModule.call(void 0, "@babel/traverse");
  traverse(ast, {
    CallExpression(path) {
      nodes.push(path.node);
    }
  });
  const results = [];
  for (const node of nodes) {
    const { callee, arguments: args } = node;
    if (callee.type !== "Identifier" || callee.name !== "_c" || args[1].type !== "ObjectExpression")
      continue;
    const directives = (_a = args[1].properties.find((property) => property.type === "ObjectProperty" && property.key.type === "Identifier" && property.key.name === "directives")) == null ? void 0 : _a.value;
    if (!directives || directives.type !== "ArrayExpression")
      continue;
    const renderStart = getRenderFnStart(ast);
    for (const directive of directives.elements) {
      if ((directive == null ? void 0 : directive.type) !== "ObjectExpression")
        continue;
      const nameNode = (_b = directive.properties.find((p) => p.type === "ObjectProperty" && p.key.type === "Identifier" && p.key.name === "name")) == null ? void 0 : _b.value;
      if ((nameNode == null ? void 0 : nameNode.type) !== "StringLiteral")
        continue;
      const name = nameNode.value;
      if (!name || name.startsWith("_"))
        continue;
      results.push({
        rawName: name,
        replace: (resolved) => {
          s.prependLeft(renderStart, `
this.$options.directives["${name}"] = ${resolved};`);
        }
      });
    }
  }
  return results;
}

// src/core/transforms/directive/vue3.ts
_chunk7T67WII5js.init_cjs_shims.call(void 0, );
function resolveVue32(code, s) {
  const results = [];
  for (const match of code.matchAll(/_resolveDirective\("(.+?)"\)/g)) {
    const matchedName = match[1];
    if (match.index != null && matchedName && !matchedName.startsWith("_")) {
      const start = match.index;
      const end = start + match[0].length;
      results.push({
        rawName: matchedName,
        replace: (resolved) => s.overwrite(start, end, resolved)
      });
    }
  }
  return results;
}

// src/core/transforms/directive/index.ts
var debug3 = _debug2.default.call(void 0, "unplugin-vue-components:transform:directive");
async function transformDirective(code, transformer, s, ctx, sfcPath) {
  let no = 0;
  const results = await (transformer === "vue2" ? resolveVue22(code, s) : resolveVue32(code, s));
  for (const { rawName, replace } of results) {
    debug3(`| ${rawName}`);
    const name = _chunkLWMWOXVQjs.pascalCase.call(void 0, rawName);
    ctx.updateUsageMap(sfcPath, [name]);
    const directive = await ctx.findComponent(name, "directive", [sfcPath]);
    if (!directive)
      continue;
    const varName = `__unplugin_directives_${no}`;
    s.prepend(`${_chunkLWMWOXVQjs.stringifyComponentImport.call(void 0, _chunk7T67WII5js.__spreadProps.call(void 0, _chunk7T67WII5js.__spreadValues.call(void 0, {}, directive), { name: varName }), ctx)};
`);
    no += 1;
    replace(varName);
  }
  debug3(`^ (${no})`);
}

// src/core/transformer.ts
var debug4 = _debug2.default.call(void 0, "unplugin-vue-components:transformer");
function tranformer(ctx, transformer) {
  return async (code, id, path) => {
    ctx.searchGlob();
    const sfcPath = ctx.normalizePath(path);
    debug4(sfcPath);
    const s = new (0, _magicstring2.default)(code);
    await transformComponent(code, transformer, s, ctx, sfcPath);
    if (ctx.options.directives)
      await transformDirective(code, transformer, s, ctx, sfcPath);
    s.prepend(_chunkLWMWOXVQjs.DISABLE_COMMENT);
    const result = { code: s.toString() };
    if (ctx.sourcemap)
      result.map = s.generateMap({ source: id, includeContent: true });
    return result;
  };
}

// src/core/context.ts
var debug5 = {
  components: _debug2.default.call(void 0, "unplugin-vue-components:context:components"),
  search: _debug2.default.call(void 0, "unplugin-vue-components:context:search"),
  hmr: _debug2.default.call(void 0, "unplugin-vue-components:context:hmr"),
  decleration: _debug2.default.call(void 0, "unplugin-vue-components:decleration"),
  env: _debug2.default.call(void 0, "unplugin-vue-components:env")
};
var Context = class {
  constructor(rawOptions) {
    this.rawOptions = rawOptions;
    this.transformer = void 0;
    this._componentPaths = new Set();
    this._componentNameMap = {};
    this._componentUsageMap = {};
    this._componentCustomMap = {};
    this.root = process.cwd();
    this.sourcemap = true;
    this.alias = {};
    this._searched = false;
    this.options = resolveOptions(rawOptions, this.root);
    this.generateDeclaration = _utils.throttle.call(void 0, 500, false, this.generateDeclaration.bind(this));
    this.setTransformer(this.options.transformer);
  }
  setRoot(root) {
    if (this.root === root)
      return;
    debug5.env("root", root);
    this.root = root;
    this.options = resolveOptions(this.rawOptions, this.root);
  }
  setTransformer(name) {
    debug5.env("transformer", name);
    this.transformer = tranformer(this, name || "vue3");
  }
  transform(code, id) {
    const { path, query } = _chunkLWMWOXVQjs.parseId.call(void 0, id);
    return this.transformer(code, id, path, query);
  }
  setupViteServer(server) {
    if (this._server === server)
      return;
    this._server = server;
    this.setupWatcher(server.watcher);
  }
  setupWatcher(watcher) {
    const { globs } = this.options;
    watcher.on("unlink", (path) => {
      if (!_chunkLWMWOXVQjs.matchGlobs.call(void 0, path, globs))
        return;
      this.removeComponents(path);
      this.onUpdate(path);
    });
    watcher.on("add", (path) => {
      if (!_chunkLWMWOXVQjs.matchGlobs.call(void 0, path, globs))
        return;
      this.addComponents(path);
      this.onUpdate(path);
    });
  }
  updateUsageMap(path, paths) {
    if (!this._componentUsageMap[path])
      this._componentUsageMap[path] = new Set();
    paths.forEach((p) => {
      this._componentUsageMap[path].add(p);
    });
  }
  addComponents(paths) {
    debug5.components("add", paths);
    const size = this._componentPaths.size;
    _utils.toArray.call(void 0, paths).forEach((p) => this._componentPaths.add(p));
    if (this._componentPaths.size !== size) {
      this.updateComponentNameMap();
      return true;
    }
    return false;
  }
  addCustomComponents(info) {
    if (info.name)
      this._componentCustomMap[info.name] = info;
  }
  removeComponents(paths) {
    debug5.components("remove", paths);
    const size = this._componentPaths.size;
    _utils.toArray.call(void 0, paths).forEach((p) => this._componentPaths.delete(p));
    if (this._componentPaths.size !== size) {
      this.updateComponentNameMap();
      return true;
    }
    return false;
  }
  onUpdate(path) {
    this.generateDeclaration();
    if (!this._server)
      return;
    const payload = {
      type: "update",
      updates: []
    };
    const timestamp = +new Date();
    const name = _chunkLWMWOXVQjs.pascalCase.call(void 0, _chunkLWMWOXVQjs.getNameFromFilePath.call(void 0, path, this.options));
    Object.entries(this._componentUsageMap).forEach(([key, values]) => {
      if (values.has(name)) {
        const r = `/${_utils.slash.call(void 0, _path.relative.call(void 0, this.root, key))}`;
        payload.updates.push({
          acceptedPath: r,
          path: r,
          timestamp,
          type: "js-update"
        });
      }
    });
    if (payload.updates.length)
      this._server.ws.send(payload);
  }
  updateComponentNameMap() {
    this._componentNameMap = {};
    Array.from(this._componentPaths).forEach((path) => {
      const name = _chunkLWMWOXVQjs.pascalCase.call(void 0, _chunkLWMWOXVQjs.getNameFromFilePath.call(void 0, path, this.options));
      if (this._componentNameMap[name] && !this.options.allowOverrides) {
        console.warn(`[unplugin-vue-components] component "${name}"(${path}) has naming conflicts with other components, ignored.`);
        return;
      }
      this._componentNameMap[name] = {
        name,
        path
      };
    });
  }
  async findComponent(name, type, excludePaths = []) {
    let info = this._componentNameMap[name];
    if (info && !excludePaths.includes(info.path) && !excludePaths.includes(info.path.slice(1)))
      return info;
    for (const resolver of this.options.resolvers) {
      if (resolver.type !== type)
        continue;
      const result = await resolver.resolve(name);
      if (result) {
        if (typeof result === "string") {
          info = {
            name,
            path: result
          };
          this.addCustomComponents(info);
          return info;
        } else {
          info = _chunk7T67WII5js.__spreadValues.call(void 0, {
            name
          }, result);
          this.addCustomComponents(info);
          return info;
        }
      }
    }
    return void 0;
  }
  normalizePath(path) {
    var _a, _b, _c;
    return _chunkLWMWOXVQjs.resolveAlias.call(void 0, path, ((_b = (_a = this.viteConfig) == null ? void 0 : _a.resolve) == null ? void 0 : _b.alias) || ((_c = this.viteConfig) == null ? void 0 : _c.alias) || []);
  }
  relative(path) {
    if (path.startsWith("/") && !path.startsWith(this.root))
      return _utils.slash.call(void 0, path.slice(1));
    return _utils.slash.call(void 0, _path.relative.call(void 0, this.root, path));
  }
  searchGlob() {
    if (this._searched)
      return;
    searchComponents(this);
    debug5.search(this._componentNameMap);
    this._searched = true;
  }
  generateDeclaration() {
    if (!this.options.dts)
      return;
    debug5.decleration("generating");
    generateDeclaration(this, this.options.root, this.options.dts);
  }
  get componentNameMap() {
    return this._componentNameMap;
  }
  get componentCustomMap() {
    return this._componentCustomMap;
  }
};

// src/core/unplugin.ts
var unplugin_default = _unplugin.createUnplugin.call(void 0, (options = {}) => {
  const filter = _pluginutils.createFilter.call(void 0, options.include || [/\.vue$/, /\.vue\?vue/], options.exclude || [/[\\/]node_modules[\\/]/, /[\\/]\.git[\\/]/, /[\\/]\.nuxt[\\/]/]);
  const ctx = new Context(options);
  return {
    name: "unplugin-vue-components",
    enforce: "post",
    transformInclude(id) {
      return filter(id);
    },
    async transform(code, id) {
      if (!_chunkLWMWOXVQjs.shouldTransform.call(void 0, code))
        return null;
      try {
        const result = await ctx.transform(code, id);
        ctx.generateDeclaration();
        return result;
      } catch (e) {
        this.error(e);
      }
    },
    vite: {
      configResolved(config) {
        ctx.setRoot(config.root);
        ctx.sourcemap = config.build.sourcemap;
        if (config.plugins.find((i) => i.name === "vite-plugin-vue2"))
          ctx.setTransformer("vue2");
        if (options.dts) {
          ctx.searchGlob();
          ctx.generateDeclaration();
        }
        if (config.build.watch && config.command === "build")
          ctx.setupWatcher(_chokidar2.default.watch(ctx.options.globs));
      },
      configureServer(server) {
        ctx.setupViteServer(server);
      }
    }
  };
});



exports.unplugin_default = unplugin_default;

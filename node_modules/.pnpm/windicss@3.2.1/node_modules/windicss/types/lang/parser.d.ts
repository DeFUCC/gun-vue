import { Lexer } from './lexer';
import { Token, TokenType, Assign, Update, Import, Load, JS, NoOp, Block, PropDecl, StyleDecl, Program, Console, List, Dict, Func, Lambda, DataType, If, While, With, Try, Instance, For } from './tokens';
import type { Operand, Module } from './tokens';
export declare class Parser {
    lexer: Lexer;
    current_token: Token;
    constructor(lexer: Lexer);
    error(): never;
    eat(token_type: string): Token;
    list(): List;
    tuple(): DataType;
    dict(): Dict;
    instance(): Instance;
    data(): DataType;
    sub(): DataType;
    exp(): DataType;
    unary(): DataType;
    binop(index: number): Operand;
    expr(): DataType;
    exprs(): DataType;
    empty(): NoOp;
    console_statement(type: TokenType.LOG | TokenType.WARN | TokenType.ERROR | TokenType.ASSERT): Console;
    assignment_statement(): Assign;
    update_statement(): Update;
    javascript_statement(): JS;
    function_statement(async?: boolean): Func | Lambda;
    if_statement(): If;
    try_statement(): Try;
    while_statement(): While;
    for_statement(): For;
    with_statement(): With;
    import_statement(): Import;
    import_path(): string;
    import_all(): Module;
    import_exports(): Module;
    import_default(): Module;
    load_statement(): Load;
    statement(): Assign | NoOp;
    statement_list(): (Assign | NoOp)[];
    style_declaration(): StyleDecl | PropDecl | NoOp;
    style_list(): (StyleDecl | PropDecl | NoOp)[];
    block(): Block;
    program(): Program;
    parse(): Program;
}

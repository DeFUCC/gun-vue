import { Parser } from './parser';
import { BinOp, UnaryOp, Num, Var, Assign, Update, Import, Load, JS, Str, Template, Program, Block, PropDecl, StyleDecl, Console, List, Tuple, Params, Dict, Bool, None, Func, Lambda, Return, Yield, Raise, If, While, With, Try, Apply, Attr, Del, Instance, Await, For } from './tokens';
import type { Operand } from './tokens';
export default class Transformer {
    parser: Parser;
    code: string[];
    constructor(parser: Parser);
    error(msg?: string): never;
    visit(node: Operand): string | number | boolean | string[] | void;
    visit_Num(node: Num): number;
    visit_Boolean(node: Bool): boolean;
    visit_None(node: None): undefined;
    visit_List(node: List): string;
    visit_Tuple(node: Tuple): string;
    visit_Params(node: Params): string;
    visit_Dict(node: Dict): string;
    visit_Func(node: Func): string;
    visit_Instance(node: Instance): string;
    visit_Lambda(node: Lambda): string;
    visit_If(node: If): string;
    visit_For(node: For): string;
    visit_Try(node: Try): string;
    visit_While(node: While): string;
    visit_With(node: With): string;
    visit_Apply(node: Apply): string;
    visit_Attr(node: Attr): string;
    visit_Return(node: Return): string;
    visit_Await(node: Await): string;
    visit_Yield(node: Yield): string;
    visit_Del(node: Del): string;
    visit_Raise(node: Raise): string;
    visit_Continue(): string;
    visit_Break(): string;
    visit_Template(node: Template): string;
    visit_Str(node: Str): string;
    visit_JS(node: JS): string;
    visit_Import(node: Import): string;
    visit_Load(node: Load): string;
    visit_BinOp(node: BinOp): string;
    visit_UnaryOp(node: UnaryOp): string;
    visit_Program(node: Program): void;
    visit_Console(node: Console): string;
    visit_Block(node: Block): string[];
    visit_PropDecl(node: PropDecl): string;
    visit_StyleDecl(node: StyleDecl): string;
    visit_Assign(node: Assign): string;
    visit_Update(node: Update): string;
    visit_Var(node: Var): string;
    visit_NoOp(): void;
    transform(): string;
}

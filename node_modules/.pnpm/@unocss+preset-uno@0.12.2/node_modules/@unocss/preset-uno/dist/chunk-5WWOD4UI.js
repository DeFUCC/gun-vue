"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _chunkSCNDCSE5js = require('./chunk-SCNDCSE5.js');

// src/variants/breakpoints.ts
var regexCache = {};
var variantBreakpoints = (matcher, _, theme) => {
  for (const [point, size] of Object.entries(theme.breakpoints || {})) {
    if (!regexCache[point])
      regexCache[point] = new RegExp(`^((?:lt-)?${point}[:-])`);
    const match = matcher.match(regexCache[point]);
    if (!match)
      continue;
    const [, pre] = match;
    let direction = "min";
    let order = parseInt(size);
    if (pre.startsWith("lt-")) {
      direction = "max";
      order = -order;
    }
    const m = matcher.slice(pre.length);
    if (m === "container")
      continue;
    return {
      matcher: m,
      parent: [`@media (${direction}-width: ${size})`, order]
    };
  }
};

// src/variants/children.ts
var variantChildren = [
  _chunkSCNDCSE5js.variantMatcher.call(void 0, "children", (input) => `${input} > *`),
  _chunkSCNDCSE5js.variantMatcher.call(void 0, "all", (input) => `${input} *`),
  _chunkSCNDCSE5js.variantMatcher.call(void 0, "next", (input) => `${input}+*`)
];

// src/variants/pseudo.ts
var _core = require('@unocss/core');
var PseudoClasses = Object.fromEntries([
  "active",
  "checked",
  "default",
  "empty",
  "enabled",
  "first-of-type",
  ["first", "first-child"],
  "focus-visible",
  "focus-within",
  "focus",
  "hover",
  "indeterminate",
  "invalid",
  "last-of-type",
  ["last", "last-child"],
  "link",
  "only-child",
  "only-of-type",
  "optional",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "root",
  "target",
  "valid",
  "visited",
  ["even-of-type", "nth-of-type(even)"],
  ["even", "nth-child(even)"],
  ["odd-of-type", "nth-of-type(odd)"],
  ["odd", "nth-child(odd)"]
].map(_core.toArray));
var PseudoElements = [
  "before",
  "after",
  "first-letter",
  "first-line",
  "selection"
];
var PseudoElementsRE = new RegExp(`^(${PseudoElements.join("|")})[:-]`);
var PseudoClassesStr = Object.keys(PseudoClasses).join("|");
var PseudoClassesRE = new RegExp(`^(${PseudoClassesStr})[:-]`);
var PseudoClassesNotRE = new RegExp(`^not-(${PseudoClassesStr})[:-]`);
var PseudoClassesGroupRE = new RegExp(`^group-(${PseudoClassesStr})[:-]`);
var variantPseudoElements = (input) => {
  const match = input.match(PseudoElementsRE);
  if (match) {
    return {
      matcher: input.slice(match[1].length + 1),
      selector: (input2) => `${input2}::${match[1]}`
    };
  }
};
var variantPseudoClasses = {
  match: (input) => {
    let match = input.match(PseudoClassesRE);
    if (match) {
      const pseudo = PseudoClasses[match[1]] || match[1];
      return {
        matcher: input.slice(match[1].length + 1),
        selector: (input2) => `${input2}:${pseudo}`
      };
    }
    match = input.match(PseudoClassesNotRE);
    if (match) {
      const pseudo = PseudoClasses[match[1]] || match[1];
      return {
        matcher: input.slice(match[1].length + 5),
        selector: (input2) => `${input2}:not(:${pseudo})`
      };
    }
    match = input.match(PseudoClassesGroupRE);
    if (match) {
      const pseudo = PseudoClasses[match[1]] || match[1];
      return {
        matcher: input.slice(match[1].length + 7),
        selector: (s) => s.includes(".group:") ? s.replace(/\.group:/, `.group:${pseudo}:`) : `.group:${pseudo} ${s}`
      };
    }
  },
  multiPass: true
};

// src/variants/dark.ts
var variantColorsClass = [
  _chunkSCNDCSE5js.variantMatcher.call(void 0, "dark", (input) => `.dark $$ ${input}`),
  _chunkSCNDCSE5js.variantMatcher.call(void 0, "light", (input) => `.light $$ ${input}`)
];
var variantColorsMedia = [
  (v) => {
    const dark = _chunkSCNDCSE5js.variantMatcher.call(void 0, "dark")(v);
    if (dark) {
      return {
        ...dark,
        parent: "@media (prefers-color-scheme: dark)"
      };
    }
    const light = _chunkSCNDCSE5js.variantMatcher.call(void 0, "light")(v);
    if (light) {
      return {
        ...light,
        parent: "@media (prefers-color-scheme: light)"
      };
    }
  }
];

// src/variants/index.ts
var variantImportant = {
  match(matcher) {
    if (matcher.startsWith("!")) {
      return {
        matcher: matcher.slice(1),
        body: (body) => {
          body.forEach((v) => {
            if (v[1])
              v[1] += " !important";
          });
          return body;
        }
      };
    }
  }
};
var variantNegative = {
  match(matcher) {
    if (matcher.startsWith("-")) {
      return {
        matcher: matcher.slice(1),
        body: (body) => {
          body.forEach((v) => {
            var _a;
            v[1] = (_a = v[1]) == null ? void 0 : _a.toString().replace(/[0-9.]+(?:[a-z]+|%)?/, (i) => `-${i}`);
          });
          return body;
        }
      };
    }
  }
};
var variantSpace = (matcher) => {
  if (/^space-?([xy])-?(-?.+)$/.test(matcher) || /^divide-/.test(matcher)) {
    return {
      matcher,
      selector: (input) => {
        return `${input}>:not([hidden])~:not([hidden])`;
      }
    };
  }
};
var variants = [
  variantSpace,
  variantNegative,
  variantImportant,
  variantBreakpoints,
  ...variantChildren,
  variantPseudoClasses,
  variantPseudoElements
];













exports.variantBreakpoints = variantBreakpoints; exports.variantChildren = variantChildren; exports.PseudoClasses = PseudoClasses; exports.variantPseudoElements = variantPseudoElements; exports.variantPseudoClasses = variantPseudoClasses; exports.variantColorsClass = variantColorsClass; exports.variantColorsMedia = variantColorsMedia; exports.variantImportant = variantImportant; exports.variantNegative = variantNegative; exports.variantSpace = variantSpace; exports.variants = variants;

import { Arrayable } from '@antfu/utils';
import { FilterPattern } from '@rollup/pluginutils';

declare const presets: {
    '@nuxtjs/composition-api': ImportsMap;
    '@vue/composition-api': ImportsMap;
    '@vueuse/core': () => ImportsMap;
    '@vueuse/head': ImportsMap;
    pinia: ImportsMap;
    preact: ImportsMap;
    quasar: ImportsMap;
    react: ImportsMap;
    svelte: ImportsMap;
    'svelte/animate': ImportsMap;
    'svelte/easing': ImportsMap;
    'svelte/motion': ImportsMap;
    'svelte/store': ImportsMap;
    'svelte/transition': ImportsMap;
    'vee-validate': ImportsMap;
    vitepress: ImportsMap;
    'vue-demi': ImportsMap;
    'vue-i18n': ImportsMap;
    'vue-router': ImportsMap;
    vue: ImportsMap;
    vuex: ImportsMap;
};
declare type PresetName = keyof typeof presets;

declare type ImportNameAlias = [string, string];
declare type ImportInfo = {
    module: string;
    name: string;
    from?: string;
};
/**
 * Given a identifier name, returns the import path or an importInfo object
 */
declare type Resolver = (name: string) => string | ImportInfo | null | undefined | void;
/**
 * module, name, alias
 */
declare type ImportsMap = Record<string, (string | ImportNameAlias)[]>;
/**
 * name, meta
 */
declare type ImportsFlatMap = Record<string, ImportInfo>;
interface Options {
    /**
     * Preset names or custom imports map
     *
     * @default []
     */
    imports?: Arrayable<ImportsMap | PresetName>;
    /**
     * Identifiers to be ignored
     */
    ignore?: (string | RegExp)[];
    /**
     * Pass a custom function to resolve the component importing path from the component name.
     *
     * The component names are always in PascalCase
     */
    resolvers?: Resolver | Resolver[];
    /**
     * Filepath to generate corresponding .d.ts file.
     * Default enabled when `typescript` is installed locally.
     * Set `false` to disable.
     *
     * @default './auto-imports.d.ts'
     */
    dts?: string | boolean;
    /**
     * Allow overriding imports sources from multiple presets.
     *
     * @default false
     */
    presetOverriding?: boolean;
    /**
     * Rules to include transforming target.
     *
     * @default [/\.[jt]sx?$/, /\.vue\??/]
     */
    include?: FilterPattern;
    /**
     * Rules to exclude transforming target.
     *
     * @default [/node_modules/, /\.git/]
     */
    exclude?: FilterPattern;
    /**
     * Generate source map.
     *
     * @default false
     */
    sourceMap?: boolean;
}
interface TransformOptions {
    imports: ImportsFlatMap;
    /**
     * Identifiers to be ignored
     */
    ignore?: (string | RegExp)[];
    /**
     * Custom resolvers
     */
    resolvers?: Resolver[];
    /**
     * Generate source map.
     *
     * @default false
     */
    sourceMap?: boolean;
    /**
     * Hold the value for dynamic resolved imports, will be mutated during transforming
     */
    resolvedImports?: ImportsFlatMap;
}
interface ResolvedOptions extends Omit<Required<Options>, 'imports' | 'resolvers' | 'dts' | 'include' | 'exclude'>, Required<TransformOptions> {
    idFilter: (id: string) => boolean;
    dts: string | false;
}

export { ImportInfo, ImportNameAlias, ImportsFlatMap, ImportsMap, Options, PresetName, ResolvedOptions, Resolver, TransformOptions };

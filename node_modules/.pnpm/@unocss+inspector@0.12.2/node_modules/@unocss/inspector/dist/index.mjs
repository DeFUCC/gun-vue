var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// node/index.ts
import { resolve, dirname } from "path";
import { fileURLToPath } from "url";
import sirv from "sirv";
import gzipSize from "gzip-size";
var _dirname = typeof __dirname !== "undefined" ? __dirname : dirname(fileURLToPath(import.meta.url));
function UnocssInspector(ctx) {
  let config;
  function configureServer(server) {
    server.middlewares.use("/__unocss", sirv(resolve(_dirname, "../dist/client"), {
      single: true,
      dev: true
    }));
    server.middlewares.use("/__unocss_api", async (req, res, next) => {
      if (!req.url)
        return next();
      if (req.url === "/") {
        const info = {
          version: ctx.uno.version,
          root: config.root,
          modules: Array.from(ctx.modules.keys()),
          configPath: ctx.configFilepath,
          config: ctx.uno.config
        };
        res.setHeader("Content-Type", "application/json");
        res.write(JSON.stringify(info, null, 2));
        res.end();
        return;
      }
      if (req.url.startsWith("/module")) {
        const query = new URLSearchParams(req.url.slice(8));
        const id = query.get("id") || "";
        const code = ctx.modules.get(id);
        if (code == null) {
          res.statusCode = 404;
          res.end();
          return;
        }
        const result = await ctx.uno.generate(code, { id, preflights: false });
        const mod = __spreadProps(__spreadValues({}, result), {
          matched: Array.from(result.matched),
          gzipSize: await gzipSize(result.css),
          code,
          id
        });
        res.setHeader("Content-Type", "application/json");
        res.write(JSON.stringify(mod, null, 2));
        res.end();
        return;
      }
      if (req.url.startsWith("/repl")) {
        const query = new URLSearchParams(req.url.slice(5));
        const token = query.get("token") || "";
        const result = await ctx.uno.generate(token, { preflights: false });
        const mod = __spreadProps(__spreadValues({}, result), {
          matched: Array.from(result.matched)
        });
        res.setHeader("Content-Type", "application/json");
        res.write(JSON.stringify(mod, null, 2));
        res.end();
        return;
      }
      if (req.url.startsWith("/overview")) {
        const result = await ctx.uno.generate(ctx.tokens);
        const mod = __spreadProps(__spreadValues({}, result), {
          matched: Array.from(result.matched),
          gzipSize: await gzipSize(result.css)
        });
        res.setHeader("Content-Type", "application/json");
        res.write(JSON.stringify(mod, null, 2));
        res.end();
        return;
      }
      next();
    });
  }
  return {
    name: "unocss:inspector",
    apply: "serve",
    configResolved(_config) {
      config = _config;
    },
    configureServer
  };
}
export {
  UnocssInspector as default
};

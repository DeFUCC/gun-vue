"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _chunkY6EUTGDCjs = require('./chunk-Y6EUTGDC.js');

// src/utils/variants.ts
var variantMatcher = (name, selector) => {
  const length = name.length + 1;
  const re = new RegExp(`^${name}[:-]`);
  return (input) => {
    return input.match(re) ? {
      matcher: input.slice(length),
      selector
    } : void 0;
  };
};

// src/utils/mappings.ts
var directionMap = {
  "l": ["-left"],
  "r": ["-right"],
  "t": ["-top"],
  "b": ["-bottom"],
  "s": ["-inline-start"],
  "e": ["-inline-end"],
  "x": ["-left", "-right"],
  "y": ["-top", "-bottom"],
  "": [""],
  "a": [""]
};
var cornerMap = {
  "t": ["-top-left", "-top-right"],
  "r": ["-top-right", "-bottom-right"],
  "b": ["-bottom-left", "-bottom-right"],
  "l": ["-bottom-left", "-top-left"],
  "tl": ["-top-left"],
  "lt": ["-top-left"],
  "tr": ["-top-right"],
  "rt": ["-top-right"],
  "bl": ["-bottom-left"],
  "lb": ["-bottom-left"],
  "br": ["-bottom-right"],
  "rb": ["-bottom-right"],
  "": [""]
};
var xyzMap = {
  "x": ["-x"],
  "y": ["-y"],
  "z": ["-z"],
  "": ["-x", "-y"]
};

// src/utils/handlers/handlers.ts
var handlers_exports = {};
_chunkY6EUTGDCjs.__export.call(void 0, handlers_exports, {
  bracket: () => bracket,
  cssvar: () => cssvar,
  fraction: () => fraction,
  global: () => global,
  number: () => number,
  percent: () => percent,
  px: () => px,
  rem: () => rem,
  time: () => time
});
var numberWithUnitRE = /^(-?[0-9.]+)(px|pt|pc|rem|em|%|vh|vw|in|cm|mm|ex|ch|vmin|vmax)?$/i;
var numberRE = /^(-?[0-9.]+)$/i;
function rem(str) {
  if (str === "auto" || str === "a")
    return "auto";
  const match = str.match(numberWithUnitRE);
  if (!match)
    return;
  const [, n, unit] = match;
  if (unit)
    return str;
  const num = parseFloat(n);
  if (!Number.isNaN(num))
    return `${num / 4}rem`;
}
function px(str) {
  const match = str.match(numberWithUnitRE);
  if (!match)
    return;
  const [, n, unit] = match;
  if (unit)
    return str;
  const num = parseFloat(n);
  if (!Number.isNaN(num))
    return `${num}px`;
}
function number(str) {
  if (!numberRE.test(str))
    return;
  const num = parseFloat(str);
  if (!Number.isNaN(num))
    return num;
}
function percent(str) {
  if (str.endsWith("%"))
    str = str.slice(0, -1);
  const num = parseFloat(str);
  if (!Number.isNaN(num))
    return `${num / 100}`;
}
function fraction(str) {
  const [left, right] = str.split("/");
  const num = parseFloat(left) / parseFloat(right);
  if (!Number.isNaN(num))
    return `${num * 100}%`;
}
function bracket(str) {
  if (str && str[0] === "[" && str[str.length - 1] === "]")
    return str.slice(1, -1).replace(/_/g, " ");
}
function cssvar(str) {
  if (str.startsWith("$"))
    return `var(--${str.slice(1)})`;
}
function time(str) {
  const duration = Number(str.replace(/(s|ms)$/, ""));
  if (isNaN(duration))
    return;
  if (/ms|s$/.test(str))
    return str;
  return `${str}ms`;
}
function global(str) {
  if (["inherit", "initial", "unset"].includes(str))
    return str;
}

// src/utils/handlers/shorthand.ts
var handlersNames = Object.keys(handlers_exports);
var handler = function(str) {
  var _a;
  const s = ((_a = this.__options) == null ? void 0 : _a.sequence) || [];
  this.__options.sequence = [];
  for (const n of s) {
    const res = handlers_exports[n](str);
    if (res != null)
      return res;
  }
  return void 0;
};
function addProcessor(that, name) {
  if (!that.__options) {
    that.__options = {
      sequence: []
    };
  }
  that.__options.sequence.push(name);
  return that;
}
handlersNames.forEach((i) => {
  Object.defineProperty(handler, i, {
    enumerable: true,
    get() {
      return addProcessor(this, i);
    }
  });
});

// src/utils/index.ts
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}








exports.directionMap = directionMap; exports.cornerMap = cornerMap; exports.xyzMap = xyzMap; exports.handler = handler; exports.variantMatcher = variantMatcher; exports.capitalize = capitalize;

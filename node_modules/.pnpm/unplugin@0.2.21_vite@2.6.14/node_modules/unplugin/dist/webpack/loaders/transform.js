var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/webpack/loaders/transform.ts
__export(exports, {
  default: () => transform
});
async function transform(source, map) {
  var _a;
  const callback = this.async();
  const { unpluginName } = this.query;
  const plugin = (_a = this._compiler) == null ? void 0 : _a.$unpluginContext[unpluginName];
  if (!(plugin == null ? void 0 : plugin.transform)) {
    return callback(null, source, map);
  }
  const context = {
    error: (error) => this.emitError(typeof error === "string" ? new Error(error) : error),
    warn: (error) => this.emitWarning(typeof error === "string" ? new Error(error) : error)
  };
  const res = await plugin.transform.call(context, source, this.resource);
  if (res == null) {
    callback(null, source, map);
  } else if (typeof res !== "string") {
    callback(null, res.code, map == null ? map : res.map || map);
  } else {
    callback(null, res, map);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});

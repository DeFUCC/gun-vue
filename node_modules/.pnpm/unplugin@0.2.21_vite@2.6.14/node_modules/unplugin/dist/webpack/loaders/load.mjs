// src/webpack/utils.ts
function slash(path) {
  return path.replace(/\\/g, "/");
}

// src/webpack/loaders/load.ts
async function load(source, map) {
  var _a, _b;
  const callback = this.async();
  const { unpluginName } = this.query;
  const plugin = (_a = this._compiler) == null ? void 0 : _a.$unpluginContext[unpluginName];
  let id = this.resource;
  if (!(plugin == null ? void 0 : plugin.load) || !id) {
    return callback(null, source, map);
  }
  const context = {
    error: (error) => this.emitError(typeof error === "string" ? new Error(error) : error),
    warn: (error) => this.emitWarning(typeof error === "string" ? new Error(error) : error)
  };
  if (id.startsWith(plugin.__virtualModulePrefix)) {
    id = id.slice(plugin.__virtualModulePrefix.length);
  }
  const res = await plugin.load.call(context, slash(id));
  if (res == null) {
    callback(null, source, map);
  } else if (typeof res !== "string") {
    callback(null, res.code, (_b = res.map) != null ? _b : map);
  } else {
    callback(null, res, map);
  }
}
export {
  load as default
};

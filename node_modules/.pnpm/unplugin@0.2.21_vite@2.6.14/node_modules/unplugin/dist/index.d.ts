import { SourceMap, Plugin, PluginContextMeta } from 'rollup';
export { Plugin as RollupPlugin } from 'rollup';
import { Compiler, WebpackPluginInstance } from 'webpack';
export { Compiler as WebpackCompiler } from 'webpack';
import { Plugin as Plugin$1 } from 'vite';
export { Plugin as VitePlugin } from 'vite';
import VirtualModulesPlugin from 'webpack-virtual-modules';

declare type Thenable<T> = T | Promise<T>;
declare type TransformResult = string | {
    code: string;
    map?: SourceMap | null;
} | null | undefined;
declare type ExternalIdResult = {
    id: string;
    external?: boolean;
};
interface UnpluginOptions {
    name: string;
    enforce?: 'post' | 'pre' | undefined;
    buildStart?: () => Promise<void> | void;
    buildEnd?: () => Promise<void> | void;
    transformInclude?: (id: string) => boolean;
    transform?: (this: UnpluginContext, code: string, id: string) => Thenable<TransformResult>;
    load?: (this: UnpluginContext, id: string) => Thenable<TransformResult>;
    resolveId?: (id: string, importer?: string) => Thenable<string | ExternalIdResult | null | undefined>;
    rollup?: Partial<Plugin>;
    webpack?: (compiler: Compiler) => void;
    vite?: Partial<Plugin$1>;
}
interface ResolvedUnpluginOptions extends UnpluginOptions {
    __vfs?: VirtualModulesPlugin;
    __vfsModules?: Set<string>;
    __virtualModulePrefix: string;
}
declare type UnpluginFactory<UserOptions> = (options: UserOptions | undefined, meta: UnpluginContextMeta) => UnpluginOptions;
interface UnpluginInstance<UserOptions> {
    rollup: (options?: UserOptions) => Plugin;
    webpack: (options?: UserOptions) => WebpackPluginInstance;
    vite: (options?: UserOptions) => Plugin$1;
    raw: UnpluginFactory<UserOptions>;
}
interface UnpluginContextMeta extends Partial<PluginContextMeta> {
    framework: 'rollup' | 'vite' | 'webpack';
    webpack?: {
        compiler: Compiler;
    };
}
interface UnpluginContext {
    error(message: any): void;
    warn(message: any): void;
}
declare module 'webpack' {
    interface Compiler {
        $unpluginContext: Record<string, ResolvedUnpluginOptions>;
    }
}

declare function createUnplugin<UserOptions = {}>(factory: UnpluginFactory<UserOptions>): UnpluginInstance<UserOptions>;

export { ExternalIdResult, ResolvedUnpluginOptions, Thenable, TransformResult, UnpluginContext, UnpluginContextMeta, UnpluginFactory, UnpluginInstance, UnpluginOptions, createUnplugin };

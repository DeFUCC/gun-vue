// src/index.ts
import { extractorSplit } from "@unocss/core";

// src/extractor.ts
import { isValidSelector } from "@unocss/core";
var strippedPrefixes = [
  "v-bind:",
  ":"
];
var splitterRE = /[\s'"`;]+/g;
var elementRE = /<\w[\w:\.$-]*\s((?:'[\s\S]*?'|"[\s\S]*?"|`[\s\S]*?`|\{[\s\S]*?\}|[\s\S]*?)*?)>/g;
var valuedAttributeRE = /([?]|[\w:-]+)(?:=(["'])([^\2]+?)\2)?/g;
var extractorAttributify = (options) => ({
  name: "attributify",
  extract({ code }) {
    const result = Array.from(code.matchAll(elementRE)).flatMap((match) => Array.from((match[1] || "").matchAll(valuedAttributeRE))).flatMap(([, name, _, content]) => {
      for (const prefix of strippedPrefixes) {
        if (name.startsWith(prefix)) {
          name = name.slice(prefix.length);
          break;
        }
      }
      if (!content) {
        if (isValidSelector(name) && (options == null ? void 0 : options.nonValuedAttribute) !== false)
          return [`[${name}=""]`];
        return [];
      }
      if (["class", "className"].includes(name)) {
        return content.split(splitterRE).filter(isValidSelector);
      } else {
        return content.split(splitterRE).filter(Boolean).map((v) => `[${name}~="${v}"]`);
      }
    });
    return new Set(result);
  }
});

// src/variant.ts
import { isAttributifySelector } from "@unocss/core";
var variantsRE = /^(.+\:\!?)?(.*?)$/;
var variantAttributify = (options = {}) => {
  var _a;
  const prefix = (_a = options.prefix) != null ? _a : "un-";
  return (input) => {
    const match = isAttributifySelector(input);
    if (!match)
      return;
    let name = match[1];
    if (name.startsWith(prefix))
      name = name.slice(prefix.length);
    else if (options.prefixedOnly)
      return;
    const content = match[2];
    const [, variants = "", body = content] = content.match(variantsRE) || [];
    if (body === "~" || !body)
      return `${variants}${name}`;
    else
      return `${variants}${name}-${body}`;
  };
};

// src/index.ts
var preset = (options) => {
  const variants = [
    variantAttributify(options)
  ];
  const extractors = [
    extractorAttributify(options)
  ];
  if (!(options == null ? void 0 : options.strict))
    extractors.unshift(extractorSplit);
  return {
    name: "@unocss/preset-attributify",
    variants,
    extractors
  };
};
var src_default = preset;
export {
  src_default as default,
  extractorAttributify,
  variantAttributify
};

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/index.ts
__export(exports, {
  default: () => src_default,
  extractorAttributify: () => extractorAttributify,
  variantAttributify: () => variantAttributify
});
var import_core3 = __toModule(require("@unocss/core"));

// src/extractor.ts
var import_core = __toModule(require("@unocss/core"));
var strippedPrefixes = [
  "v-bind:",
  ":"
];
var splitterRE = /[\s'"`;]+/g;
var elementRE = /<\w[\w:\.$-]*\s((?:'[\s\S]*?'|"[\s\S]*?"|`[\s\S]*?`|\{[\s\S]*?\}|[\s\S]*?)*?)>/g;
var valuedAttributeRE = /([?]|[\w:-]+)(?:=(["'])([^\2]+?)\2)?/g;
var extractorAttributify = (options) => ({
  name: "attributify",
  extract({ code }) {
    const result = Array.from(code.matchAll(elementRE)).flatMap((match) => Array.from((match[1] || "").matchAll(valuedAttributeRE))).flatMap(([, name, _, content]) => {
      for (const prefix of strippedPrefixes) {
        if (name.startsWith(prefix)) {
          name = name.slice(prefix.length);
          break;
        }
      }
      if (!content) {
        if ((0, import_core.isValidSelector)(name) && (options == null ? void 0 : options.nonValuedAttribute) !== false)
          return [`[${name}=""]`];
        return [];
      }
      if (["class", "className"].includes(name)) {
        return content.split(splitterRE).filter(import_core.isValidSelector);
      } else {
        return content.split(splitterRE).filter(Boolean).map((v) => `[${name}~="${v}"]`);
      }
    });
    return new Set(result);
  }
});

// src/variant.ts
var import_core2 = __toModule(require("@unocss/core"));
var variantsRE = /^(.+\:\!?)?(.*?)$/;
var variantAttributify = (options = {}) => {
  var _a;
  const prefix = (_a = options.prefix) != null ? _a : "un-";
  return (input) => {
    const match = (0, import_core2.isAttributifySelector)(input);
    if (!match)
      return;
    let name = match[1];
    if (name.startsWith(prefix))
      name = name.slice(prefix.length);
    else if (options.prefixedOnly)
      return;
    const content = match[2];
    const [, variants = "", body = content] = content.match(variantsRE) || [];
    if (body === "~" || !body)
      return `${variants}${name}`;
    else
      return `${variants}${name}-${body}`;
  };
};

// src/index.ts
var preset = (options) => {
  const variants = [
    variantAttributify(options)
  ];
  const extractors = [
    extractorAttributify(options)
  ];
  if (!(options == null ? void 0 : options.strict))
    extractors.unshift(import_core3.extractorSplit);
  return {
    name: "@unocss/preset-attributify",
    variants,
    extractors
  };
};
var src_default = preset;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  extractorAttributify,
  variantAttributify
});

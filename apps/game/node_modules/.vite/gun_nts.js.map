{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/gun@0.2020.1235/node_modules/gun/nts.js", "dep:gun_nts"],
  "sourcesContent": [";(function(){\n  var Gun  = (typeof window !== \"undefined\")? window.Gun : require('./gun');\n  var dam  = 'nts';\n  var smooth = 2;\n\n  Gun.on('create', function(root){ // switch to DAM, deprecated old\n  \treturn ; // stub out for now. TODO: IMPORTANT! re-add back in later.\n    var opt = root.opt, mesh = opt.mesh;\n    if(!mesh) return;\n\n    // Track connections\n    var connections = [];\n    root.on('hi', function(peer) {\n      this.to.next(peer);\n      connections.push({peer, latency: 0, offset: 0, next: 0});\n    });\n    root.on('bye', function(peer) {\n      this.to.next(peer);\n      var found = connections.find(connection => connection.peer.id == peer.id);\n      if (!found) return;\n      connections.splice(connections.indexOf(found), 1);\n    });\n\n    function response(msg, connection) {\n      var now            = Date.now(); // Lack of drift intentional, provides more accurate RTT\n      connection.latency = (now - msg.nts[0]) / 2;\n      connection.offset  = (msg.nts[1] + connection.latency) - (now + Gun.state.drift);\n      console.log(connection.offset);\n      Gun.state.drift   += connection.offset / (connections.length + smooth);\n      console.log(`Update time by local: ${connection.offset} / ${connections.length + smooth}`);\n    }\n\n    // Handle echo & setting based on known connection latency as well\n    mesh.hear[dam] = function(msg, peer) {\n      console.log('MSG', msg);\n      var now   = Date.now() + Gun.state.drift;\n      var connection = connections.find(connection => connection.peer.id == peer.id);\n      if (!connection) return;\n      if (msg.nts.length >= 2) return response(msg, connection);\n      mesh.say({dam, '@': msg['#'], nts: msg.nts.concat(now)}, peer);\n      connection.offset = msg.nts[0] + connection.latency - now;\n      Gun.state.drift  += connection.offset / (connections.length + smooth);\n      console.log(`Update time by remote: ${connection.offset} / ${connections.length + smooth}`);\n    };\n\n    // Handle ping transmission\n    setTimeout(function trigger() {\n      console.log('TRIGGER');\n      if (!connections.length) return setTimeout(trigger, 100);\n      var now = Date.now(); // Lack of drift intentional, provides more accurate RTT & NTP reference\n\n      // Send pings\n      connections.forEach(function(connection) {\n        if (connection.next > now) return;\n        mesh.say({\n          dam,\n          '#': String.random(3),\n          nts: [now],\n        });\n      });\n\n      // Plan next round of pings\n      connections.forEach(function(connection) {\n        if (connection.next > now) return;\n        // https://discord.com/channels/612645357850984470/612645357850984473/755334349699809300\n        var delay = Math.min(2e4, Math.max(250, 150000 / Math.abs((connection.offset)||1)));\n        connection.next = now + delay;\n      });\n\n      // Plan next trigger round\n      // May overshoot by runtime of this function\n      var nextRound = Infinity;\n      connections.forEach(function(connection) {\n        nextRound = Math.min(nextRound, connection.next);\n      });\n      setTimeout(trigger, nextRound - now);\n      console.log(`Next sync round in ${(nextRound - now) / 1000} seconds`);\n    }, 1);\n  });\n\n}());\n", "export default require(\"../../node_modules/.pnpm/gun@0.2020.1235/node_modules/gun/nts.js\");"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAAC,IAAC,YAAU;AACV,UAAI,MAAQ,OAAO,WAAW,cAAc,OAAO,MAAM;AACzD,UAAI,MAAO;AACX,UAAI,SAAS;AAEb,UAAI,GAAG,UAAU,SAAS,MAAK;AAC9B;AACC,YAAI,MAAM,KAAK,KAAK,OAAO,IAAI;AAC/B,YAAG,CAAC;AAAM;AAGV,YAAI,cAAc;AAClB,aAAK,GAAG,MAAM,SAAS,MAAM;AAC3B,eAAK,GAAG,KAAK;AACb,sBAAY,KAAK,EAAC,MAAM,SAAS,GAAG,QAAQ,GAAG,MAAM;AAAA;AAEvD,aAAK,GAAG,OAAO,SAAS,MAAM;AAC5B,eAAK,GAAG,KAAK;AACb,cAAI,QAAQ,YAAY,KAAK,gBAAc,WAAW,KAAK,MAAM,KAAK;AACtE,cAAI,CAAC;AAAO;AACZ,sBAAY,OAAO,YAAY,QAAQ,QAAQ;AAAA;AAGjD,0BAAkB,KAAK,YAAY;AACjC,cAAI,MAAiB,KAAK;AAC1B,qBAAW,UAAW,OAAM,IAAI,IAAI,MAAM;AAC1C,qBAAW,SAAW,IAAI,IAAI,KAAK,WAAW,UAAY,OAAM,IAAI,MAAM;AAC1E,kBAAQ,IAAI,WAAW;AACvB,cAAI,MAAM,SAAW,WAAW,SAAU,aAAY,SAAS;AAC/D,kBAAQ,IAAI,yBAAyB,WAAW,YAAY,YAAY,SAAS;AAAA;AAInF,aAAK,KAAK,OAAO,SAAS,KAAK,MAAM;AACnC,kBAAQ,IAAI,OAAO;AACnB,cAAI,MAAQ,KAAK,QAAQ,IAAI,MAAM;AACnC,cAAI,aAAa,YAAY,KAAK,iBAAc,YAAW,KAAK,MAAM,KAAK;AAC3E,cAAI,CAAC;AAAY;AACjB,cAAI,IAAI,IAAI,UAAU;AAAG,mBAAO,SAAS,KAAK;AAC9C,eAAK,IAAI,EAAC,KAAK,KAAK,IAAI,MAAM,KAAK,IAAI,IAAI,OAAO,QAAO;AACzD,qBAAW,SAAS,IAAI,IAAI,KAAK,WAAW,UAAU;AACtD,cAAI,MAAM,SAAU,WAAW,SAAU,aAAY,SAAS;AAC9D,kBAAQ,IAAI,0BAA0B,WAAW,YAAY,YAAY,SAAS;AAAA;AAIpF,mBAAW,mBAAmB;AAC5B,kBAAQ,IAAI;AACZ,cAAI,CAAC,YAAY;AAAQ,mBAAO,WAAW,SAAS;AACpD,cAAI,MAAM,KAAK;AAGf,sBAAY,QAAQ,SAAS,YAAY;AACvC,gBAAI,WAAW,OAAO;AAAK;AAC3B,iBAAK,IAAI;AAAA,cACP;AAAA,cACA,KAAK,OAAO,OAAO;AAAA,cACnB,KAAK,CAAC;AAAA;AAAA;AAKV,sBAAY,QAAQ,SAAS,YAAY;AACvC,gBAAI,WAAW,OAAO;AAAK;AAE3B,gBAAI,QAAQ,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,OAAS,KAAK,IAAK,WAAW,UAAS;AAC/E,uBAAW,OAAO,MAAM;AAAA;AAK1B,cAAI,YAAY;AAChB,sBAAY,QAAQ,SAAS,YAAY;AACvC,wBAAY,KAAK,IAAI,WAAW,WAAW;AAAA;AAE7C,qBAAW,SAAS,YAAY;AAChC,kBAAQ,IAAI,sBAAuB,aAAY,OAAO;AAAA,WACrD;AAAA;AAAA;AAAA;AAAA;;;AC7EP,IAAO,kBAAQ;",
  "names": []
}

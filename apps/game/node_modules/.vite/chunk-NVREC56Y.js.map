{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/gun@0.2020.1235/node_modules/gun/lib/yson.js", "../../../../node_modules/.pnpm/gun@0.2020.1235/node_modules/gun/lib/radmigtmp.js", "../../../../node_modules/.pnpm/gun@0.2020.1235/node_modules/gun/lib/radisk.js"],
  "sourcesContent": [";(function(){\n// JSON: JavaScript Object Notation\n// YSON: Yielding javaScript Object Notation\nvar yson = {}, u, sI = setTimeout.turn || (typeof setImmediate != ''+u && setImmediate) || setTimeout;\n\nyson.parseAsync = function(text, done, revive, M){\n\tif('string' != typeof text){ try{ done(u,JSON.parse(text)) }catch(e){ done(e) } return }\n\tvar ctx = {i: 0, text: text, done: done, l: text.length, up: []};\n\t//M = 1024 * 1024 * 100;\n\t//M = M || 1024 * 64;\n\tM = M || 1024 * 32;\n\tparse();\n\tfunction parse(){\n\t\t//var S = +new Date;\n\t\tvar s = ctx.text;\n\t\tvar i = ctx.i, l = ctx.l, j = 0;\n\t\tvar w = ctx.w, b, tmp;\n\t\twhile(j++ < M){\n\t\t\tvar c = s[i++];\n\t\t\tif(i > l){\n\t\t\t\tctx.end = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(w){\n\t\t\t\ti = s.indexOf('\"', i-1); c = s[i];\n\t\t\t\ttmp = '\\\\' == s[i-1];\n\t\t\t\tb = b || tmp;\n\t\t\t\tif('\"' == c && !tmp){\n\t\t\t\t\tw = u;\n\t\t\t\t\ttmp = ctx.s;\n\t\t\t\t\tif(ctx.a){\n\t\t\t\t\t\ttmp = s.slice(ctx.sl, i);\n\t\t\t\t\t\tif(b || (1+tmp.indexOf('\\\\u'))){ tmp = JSON.parse('\"'+tmp+'\"') } // unicode :( handling\n\t\t\t\t\t\tif(ctx.at instanceof Array){\n\t\t\t\t\t\t\tctx.at.push(ctx.s = tmp);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif(!ctx.at){ ctx.end = j = M; tmp = u }\n\t\t\t\t\t\t\t(ctx.at||{})[ctx.s] = ctx.s = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx.s = s.slice(ctx.sl, i);\n\t\t\t\t\t\tif(b || (1+ctx.s.indexOf('\\\\u'))){ ctx.s = JSON.parse('\"'+ctx.s+'\"'); } // unicode :( handling\n\t\t\t\t\t}\n\t\t\t\t\tctx.a = b = u;\n\t\t\t\t}\n\t\t\t\t++i;\n\t\t\t} else {\n\t\t\t\tswitch(c){\n\t\t\t\tcase '\"':\n\t\t\t\t\tctx.sl = i;\n\t\t\t\t\tw = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase ':':\n\t\t\t\t\tctx.ai = i;\n\t\t\t\t\tctx.a = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase ',':\n\t\t\t\t\tif(ctx.a || ctx.at instanceof Array){\n\t\t\t\t\t\tif(tmp = s.slice(ctx.ai, i-1)){\n\t\t\t\t\t\t\tif(u !== (tmp = value(tmp))){\n\t\t\t\t\t\t\t\tif(ctx.at instanceof Array){\n\t\t\t\t\t\t\t\t\tctx.at.push(tmp);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tctx.at[ctx.s] = tmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tctx.a = u;\n\t\t\t\t\tif(ctx.at instanceof Array){\n\t\t\t\t\t\tctx.a = true;\n\t\t\t\t\t\tctx.ai = i;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase '{':\n\t\t\t\t\tctx.up.push(ctx.at||(ctx.at = {}));\n\t\t\t\t\tif(ctx.at instanceof Array){\n\t\t\t\t\t\tctx.at.push(ctx.at = {});\n\t\t\t\t\t} else\n\t\t\t\t\tif(u !== (tmp = ctx.s)){\n\t\t\t\t\t\tctx.at[tmp] = ctx.at = {};\n\t\t\t\t\t}\n\t\t\t\t\tctx.a = u;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '}':\n\t\t\t\t\tif(ctx.a){\n\t\t\t\t\t\tif(tmp = s.slice(ctx.ai, i-1)){\n\t\t\t\t\t\t\tif(u !== (tmp = value(tmp))){\n\t\t\t\t\t\t\t\tif(ctx.at instanceof Array){\n\t\t\t\t\t\t\t\t\tctx.at.push(tmp);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif(!ctx.at){ ctx.end = j = M; tmp = u }\n\t\t\t\t\t\t\t\t\t(ctx.at||{})[ctx.s] = tmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tctx.a = u;\n\t\t\t\t\tctx.at = ctx.up.pop();\n\t\t\t\t\tbreak;\n\t\t\t\tcase '[':\n\t\t\t\t\tif(u !== (tmp = ctx.s)){\n\t\t\t\t\t\tctx.up.push(ctx.at);\n\t\t\t\t\t\tctx.at[tmp] = ctx.at = [];\n\t\t\t\t\t} else\n\t\t\t\t\tif(!ctx.at){\n\t\t\t\t\t\tctx.up.push(ctx.at = []);\n\t\t\t\t\t}\n\t\t\t\t\tctx.a = true;\n\t\t\t\t\tctx.ai = i;\n\t\t\t\t\tbreak;\n\t\t\t\tcase ']':\n\t\t\t\t\tif(ctx.a){\n\t\t\t\t\t\tif(tmp = s.slice(ctx.ai, i-1)){\n\t\t\t\t\t\t\tif(u !== (tmp = value(tmp))){\n\t\t\t\t\t\t\t\tif(ctx.at instanceof Array){\n\t\t\t\t\t\t\t\t\tctx.at.push(tmp);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tctx.at[ctx.s] = tmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tctx.a = u;\n\t\t\t\t\tctx.at = ctx.up.pop();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tctx.s = u;\n\t\tctx.i = i;\n\t\tctx.w = w;\n\t\tif(ctx.end){\n\t\t\ttmp = ctx.at;\n\t\t\tif(u === tmp){\n\t\t\t\ttry{ tmp = JSON.parse(text)\n\t\t\t\t}catch(e){ return ctx.done(e) }\n\t\t\t}\n\t\t\tctx.done(u, tmp);\n\t\t} else {\n\t\t\tsI(parse);\n\t\t}\n\t}\n}\nfunction value(s){\n\tvar n = parseFloat(s);\n\tif(!isNaN(n)){\n\t\treturn n;\n\t}\n\ts = s.trim();\n\tif('true' == s){\n\t\treturn true;\n\t}\n\tif('false' == s){\n\t\treturn false;\n\t}\n\tif('null' == s){\n\t\treturn null;\n\t}\n}\n\nyson.stringifyAsync = function(data, done, replacer, space, ctx){\n\t//try{done(u, JSON.stringify(data, replacer, space))}catch(e){done(e)}return;\n\tctx = ctx || {};\n\tctx.text = ctx.text || \"\";\n\tctx.up = [ctx.at = {d: data}];\n\tctx.done = done;\n\tctx.i = 0;\n\tvar j = 0;\n\tify();\n\tfunction ify(){\n\t\tvar at = ctx.at, data = at.d, add = '', tmp;\n\t\tif(at.i && (at.i - at.j) > 0){ add += ',' }\n\t\tif(u !== (tmp = at.k)){ add += JSON.stringify(tmp) + ':' } //'\"'+tmp+'\":' } // only if backslash\n\t\tswitch(typeof data){\n\t\tcase 'boolean':\n\t\t\tadd += ''+data;\n\t\t\tbreak;\n\t\tcase 'string':\n\t\t\tadd += JSON.stringify(data); //ctx.text += '\"'+data+'\"';//JSON.stringify(data); // only if backslash\n\t\t\tbreak;\n\t\tcase 'number':\n\t\t\tadd += data;\n\t\t\tbreak;\n\t\tcase 'object':\n\t\t\tif(!data){\n\t\t\t\tadd += 'null';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(data instanceof Array){\t\n\t\t\t\tadd += '[';\n\t\t\t\tat = {i: -1, as: data, up: at, j: 0};\n\t\t\t\tat.l = data.length;\n\t\t\t\tctx.up.push(ctx.at = at);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif('function' != typeof (data||'').toJSON){\n\t\t\t\tadd += '{';\n\t\t\t\tat = {i: -1, ok: Object.keys(data).sort(), as: data, up: at, j: 0};\n\t\t\t\tat.l = at.ok.length;\n\t\t\t\tctx.up.push(ctx.at = at);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(tmp = data.toJSON()){\n\t\t\t\tadd += tmp;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// let this & below pass into default case...\n\t\tcase 'function':\n\t\t\tif(at.as instanceof Array){\n\t\t\t\tadd += 'null';\n\t\t\t\tbreak;\n\t\t\t}\n\t\tdefault: // handle wrongly added leading `,` if previous item not JSON-able.\n\t\t\tadd = '';\n\t\t\tat.j++;\n\t\t}\n\t\tctx.text += add;\n\t\twhile(1+at.i >= at.l){\n\t\t\tctx.text += (at.ok? '}' : ']');\n\t\t\tat = ctx.at = at.up;\n\t\t}\n\t\tif(++at.i < at.l){\n\t\t\tif(tmp = at.ok){\n\t\t\t\tat.d = at.as[at.k = tmp[at.i]];\n\t\t\t} else {\n\t\t\t\tat.d = at.as[at.i];\n\t\t\t}\n\t\t\tif(++j < 9){ return ify() } else { j = 0 }\n\t\t\tsI(ify);\n\t\t\treturn;\n\t\t}\n\t\tctx.done(u, ctx.text);\n\t}\n}\nif(typeof window != ''+u){ window.YSON = yson }\ntry{ if(typeof module != ''+u){ module.exports = yson } }catch(e){}\nif(typeof JSON != ''+u){\n\tJSON.parseAsync = yson.parseAsync;\n\tJSON.stringifyAsync = yson.stringifyAsync;\n}\n\n}());", "module.exports = function(r){\n\tvar Radix = require('./radix');\n\tr.find('a', function(){\n\t\tvar l = [];\n\t\tRadix.map(r.list, function(v,f){\n\t\t\tif(!(f.indexOf('%1B') + 1)){ return }\n\t\t\tif(!v){ return }\n\t\t\tl.push([f,v]);\n\t\t});\n\t\tif(l.length){\n\t\t\tconsole.log(\"\\n! ! ! WARNING ! ! !\\nRAD v0.2020.x has detected OLD v0.2019.x data & automatically migrating. Automatic migration will be turned OFF in future versions! If you are just developing/testing, we recommend you reset your data. Please contact us if you have any concerns.\\nThis message should only log once.\")\n\t\t}\n\t\tvar f, v;\n\t\tl.forEach(function(a){\n\t\t\tf = a[0]; v = a[1];\n\t\t\tr.list(decodeURIComponent(f), v);\n\t\t\tr.list(f, 0);\n\t\t});\n\t\tif(!f){ return }\n\t\tr.find.bad(f);\n\t})\n};", ";(function(){\n\n\tfunction Radisk(opt){\n\n\t\topt = opt || {};\n\t\topt.log = opt.log || console.log;\n\t\topt.file = String(opt.file || 'radata');\n\t\tvar has = (Radisk.has || (Radisk.has = {}))[opt.file];\n\t\tif(has){ return has }\n\n\t\topt.max = opt.max || (opt.memory? (opt.memory * 999 * 999) : 300000000) * 0.3;\n\t\topt.until = opt.until || opt.wait || 250;\n\t\topt.batch = opt.batch || (10 * 1000);\n\t\topt.chunk = opt.chunk || (1024 * 1024 * 1); // 1MB\n\t\topt.code = opt.code || {};\n\t\topt.code.from = opt.code.from || '!';\n\t\topt.jsonify = true;\n\n\n\t\tfunction ename(t){ return encodeURIComponent(t).replace(/\\*/g, '%2A') } // TODO: Hash this also, but allow migration!\n\t\tfunction atomic(v){ return u !== v && (!v || 'object' != typeof v) }\n\t\tvar timediate = (''+u === typeof setImmediate)? setTimeout : setImmediate;\n\t\tvar puff = setTimeout.turn || timediate, u;\n\t\tvar map = Radix.object;\n\t\tvar ST = 0;\n\n\t\tif(!opt.store){\n\t\t\treturn opt.log(\"ERROR: Radisk needs `opt.store` interface with `{get: fn, put: fn (, list: fn)}`!\");\n\t\t}\n\t\tif(!opt.store.put){\n\t\t\treturn opt.log(\"ERROR: Radisk needs `store.put` interface with `(file, data, cb)`!\");\n\t\t}\n\t\tif(!opt.store.get){\n\t\t\treturn opt.log(\"ERROR: Radisk needs `store.get` interface with `(file, cb)`!\");\n\t\t}\n\t\tif(!opt.store.list){\n\t\t\t//opt.log(\"WARNING: `store.list` interface might be needed!\");\n\t\t}\n\n\t\tif(''+u != typeof require){ require('./yson') }\n\t\tvar parse = JSON.parseAsync || function(t,cb,r){ var u; try{ cb(u, JSON.parse(t,r)) }catch(e){ cb(e) } }\n\t\tvar json = JSON.stringifyAsync || function(v,cb,r,s){ var u; try{ cb(u, JSON.stringify(v,r,s)) }catch(e){ cb(e) } }\n\t\t/*\n\t\t\tAny and all storage adapters should...\n\t\t\t1. Because writing to disk takes time, we should batch data to disk. This improves performance, and reduces potential disk corruption.\n\t\t\t2. If a batch exceeds a certain number of writes, we should immediately write to disk when physically possible. This caps total performance, but reduces potential loss.\n\t\t*/\n\t\tvar r = function(key, data, cb, tag, DBG){\n\t\t\tif('function' === typeof data){\n\t\t\t\tvar o = cb || {};\n\t\t\t\tcb = data;\n\t\t\t\tr.read(key, cb, o, DBG || tag);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//var tmp = (tmp = r.batch = r.batch || {})[key] = tmp[key] || {};\n\t\t\t//var tmp = (tmp = r.batch = r.batch || {})[key] = data;\n\t\t\tr.save(key, data, cb, tag, DBG);\n\t\t}\n\t\tr.save = function(key, data, cb, tag, DBG){\n\t\t\tvar s = {key: key}, tags, f, d, q;\n\t\t\ts.find = function(file){ var tmp;\n\t\t\t\ts.file = file || (file = opt.code.from);\n\t\t\t\tDBG && (DBG = DBG[file] = DBG[file] || {});\n\t\t\t\tDBG && (DBG.sf = DBG.sf || +new Date);\n\t\t\t\t//console.only.i && console.log('found', file);\n\t\t\t\tif(tmp = r.disk[file]){ s.mix(u, tmp); return }\n\t\t\t\tr.parse(file, s.mix, u, DBG);\n\t\t\t}\n\t\t\ts.mix = function(err, disk){\n\t\t\t\tDBG && (DBG.sml = +new Date);\n\t\t\t\tDBG && (DBG.sm = DBG.sm || +new Date);\n\t\t\t\tif(s.err = err || s.err){ cb(err); return } // TODO: HANDLE BATCH EMIT\n\t\t\t\tvar file = s.file = (disk||'').file || s.file, tmp;\n\t\t\t\tif(!disk && file !== opt.code.from){ // corrupt file?\n\t\t\t\t\tr.find.bad(file); // remove from dir list\n\t\t\t\t\tr.save(key, data, cb, tag); // try again\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t(disk = r.disk[file] || (r.disk[file] = disk || Radix())).file || (disk.file = file);\n\t\t\t\tif(opt.compare){\n\t\t\t\t\tdata = opt.compare(disk(key), data, key, file);\n\t\t\t\t\tif(u === data){ cb(err, -1); return } // TODO: HANDLE BATCH EMIT\n\t\t\t\t}\n\t\t\t\t(s.disk = disk)(key, data);\n\t\t\t\tif(tag){\n\t\t\t\t\t(tmp = (tmp = disk.tags || (disk.tags = {}))[tag] || (tmp[tag] = r.tags[tag] || (r.tags[tag] = {})))[file] || (tmp[file] = r.one[tag] || (r.one[tag] = cb));\n\t\t\t\t\tcb = null;\n\t\t\t\t}\n\t\t\t\tDBG && (DBG.st = DBG.st || +new Date);\n\t\t\t\t//console.only.i && console.log('mix', disk.Q);\n\t\t\t\tif(disk.Q){ cb && disk.Q.push(cb); return } disk.Q = (cb? [cb] : []);\n\t\t\t\tdisk.to = setTimeout(s.write, opt.until);\n\t\t\t}\n\t\t\ts.write = function(){\n\t\t\t\tDBG && (DBG.sto = DBG.sto || +new Date);\n\t\t\t\tvar file = f = s.file, disk = d = s.disk;\n\t\t\t\tq = s.q = disk.Q;\n\t\t\t\ttags = s.tags = disk.tags;\n\t\t\t\tdelete disk.Q;\n\t\t\t\tdelete r.disk[file];\n\t\t\t\tdelete disk.tags;\n\t\t\t\t//console.only.i && console.log('write', file, disk, 'was saving:', key, data);\n\t\t\t\tr.write(file, disk, s.ack, u, DBG);\n\t\t\t}\n\t\t\ts.ack = function(err, ok){\n\t\t\t\tDBG && (DBG.sa = DBG.sa || +new Date);\n\t\t\t\tDBG && (DBG.sal = q.length);\n\t\t\t\tvar ack, tmp;\n\t\t\t\t// TODO!!!! CHANGE THIS INTO PUFF!!!!!!!!!!!!!!!!\n\t\t\t\tfor(var id in r.tags){\n\t\t\t\t\tif(!r.tags.hasOwnProperty(id)){ continue } var tag = r.tags[id];\n\t\t\t\t\tif((tmp = r.disk[f]) && (tmp = tmp.tags) && tmp[tag]){ continue }\n\t\t\t\t\tack = tag[f];\n\t\t\t\t\tdelete tag[f];\n\t\t\t\t\tvar ne; for(var k in tag){ if(tag.hasOwnProperty(k)){ ne = true; break } } // is not empty?\n\t\t\t\t\tif(ne){ continue } //if(!obj_empty(tag)){ continue }\n\t\t\t\t\tdelete r.tags[tag];\n\t\t\t\t\tack && ack(err, ok);\n\t\t\t\t}\n\t\t\t\t!q && (q = '');\n\t\t\t\tvar l = q.length, i = 0;\n\t\t\t\t// TODO: PERF: Why is acks so slow, what work do they do??? CHECK THIS!!\n\t\t\t\t// TODO: PERF: Why is acks so slow, what work do they do??? CHECK THIS!!\n\t\t\t\t// TODO: PERF: Why is acks so slow, what work do they do??? CHECK THIS!!\n\t\t\t\t// TODO: PERF: Why is acks so slow, what work do they do??? CHECK THIS!!\n\t\t\t\t// TODO: PERF: Why is acks so slow, what work do they do??? CHECK THIS!!\n\t\t\t\t// TODO: PERF: Why is acks so slow, what work do they do??? CHECK THIS!!\n\t\t\t\t// TODO: PERF: Why is acks so slow, what work do they do??? CHECK THIS!!\n\t\t\t\tvar S = +new Date;\n\t\t\t\tfor(;i < l; i++){ (ack = q[i]) && ack(err, ok) }\n\t\t\t\tconsole.STAT && console.STAT(S, +new Date - S, 'rad acks', ename(s.file));\n\t\t\t\tconsole.STAT && console.STAT(S, q.length, 'rad acks #', ename(s.file));\n\t\t\t}\n\t\t\tcb || (cb = function(err, ok){ // test delete!\n\t\t\t\tif(!err){ return }\n\t\t\t});\n\t\t\t//console.only.i && console.log('save', key);\n\t\t\tr.find(key, s.find);\n    }\n    r.disk = {};\n    r.one = {};\n    r.tags = {};\n\n\t\t/*\n\t\t\tAny storage engine at some point will have to do a read in order to write.\n\t\t\tThis is true of even systems that use an append only log, if they support updates.\n\t\t\tTherefore it is unavoidable that a read will have to happen,\n\t\t\tthe question is just how long you delay it.\n\t\t*/\n\t\tvar RWC = 0;\n\t\tr.write = function(file, rad, cb, o, DBG){\n\t\t\tif(!rad){ cb('No radix!'); return }\n\t\t\to = ('object' == typeof o)? o : {force: o};\n\t\t\tvar f = function Fractal(){}, a, b;\n\t\t\tf.text = '';\n\t\t\tf.file = file = rad.file || (rad.file = file);\n\t\t\tif(!file){ cb('What file?'); return }\n\t\t\tf.write = function(){\n\t\t\t\tvar text = rad.raw = f.text;\n\t\t\t\tr.disk[file = rad.file || f.file || file] = rad;\n\t\t\t\tvar S = +new Date;\n\t\t\t\tDBG && (DBG.wd = S);\n\t\t\t\t//console.only.i && console.log('add', file);\n\t\t\t\tr.find.add(file, function add(err){\n\t\t\t\t\tDBG && (DBG.wa = +new Date);\n\t\t\t\t\tif(err){ cb(err); return }\n\t\t\t\t\t//console.only.i && console.log('disk', file, text);\n\t\t\t\t\topt.store.put(ename(file), text, function safe(err, ok){\n\t\t\t\t\t\tDBG && (DBG.wp = +new Date);\n\t\t\t\t\t\tconsole.STAT && console.STAT(S, ST = +new Date - S, \"wrote disk\", JSON.stringify(file), ++RWC, 'total all writes.');\n\t\t\t\t\t\t//console.only.i && console.log('done', err, ok || 1, cb);\n\t\t\t\t\t\tcb(err, ok || 1);\n\t\t\t\t\t\tif(!rad.Q){ delete r.disk[file] } // VERY IMPORTANT! Clean up memory, but not if there is already queued writes on it!\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\tf.split = function(){\n\t\t\t\tvar S = +new Date;\n\t\t\t\tDBG && (DBG.wf = S);\n\t\t\t\tf.text = '';\n\t\t\t\tif(!f.count){ f.count = 0;\n\t\t\t\t\tRadix.map(rad, function count(){ f.count++ }); // TODO: Perf? Any faster way to get total length?\n\t\t\t\t}\n\t\t\t\tDBG && (DBG.wfc = f.count);\n\t\t\t\tf.limit = Math.ceil(f.count/2);\n\t\t\t\tvar SC = f.count;\n\t\t\t\tf.count = 0;\n\t\t\t\tDBG && (DBG.wf1 = +new Date);\n\t\t\t\tf.sub = Radix();\n\t\t\t\tRadix.map(rad, f.slice, {reverse: 1}); // IMPORTANT: DO THIS IN REVERSE, SO LAST HALF OF DATA MOVED TO NEW FILE BEFORE DROPPING FROM CURRENT FILE.\n\t\t\t\tDBG && (DBG.wf2 = +new Date);\n\t\t\t\tr.write(f.end, f.sub, f.both, o);\n\t\t\t\tDBG && (DBG.wf3 = +new Date);\n\t\t\t\tf.hub = Radix();\n\t\t\t\tRadix.map(rad, f.stop);\n\t\t\t\tDBG && (DBG.wf4 = +new Date);\n\t\t\t\tr.write(rad.file, f.hub, f.both, o);\n\t\t\t\tDBG && (DBG.wf5 = +new Date);\n\t\t\t\tconsole.STAT && console.STAT(S, +new Date - S, \"rad split\", ename(rad.file), SC);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tf.slice = function(val, key){\n\t\t\t\tf.sub(f.end = key, val);\n\t\t\t\tif(f.limit <= (++f.count)){ return true }\n\t\t\t}\n\t\t\tf.stop = function(val, key){\n\t\t\t\tif(key >= f.end){ return true }\n\t\t\t\tf.hub(key, val);\n\t\t\t}\n\t\t\tf.both = function(err, ok){\n\t\t\t\tDBG && (DBG.wfd = +new Date);\n\t\t\t\tif(b){ cb(err || b); return }\n\t\t\t\tif(a){ cb(err, ok); return }\n\t\t\t\ta = true;\n\t\t\t\tb = err;\n\t\t\t}\n\t\t\tf.each = function(val, key, k, pre){\n\t\t\t\tif(u !== val){ f.count++ }\n\t\t\t\tif(opt.max <= (val||'').length){ return cb(\"Data too big!\"), true }\n\t\t\t\tvar enc = Radisk.encode(pre.length) +'#'+ Radisk.encode(k) + (u === val? '' : ':'+ Radisk.encode(val)) +'\\n';\n\t\t\t\tif((opt.chunk < f.text.length + enc.length) && (1 < f.count) && !o.force){\n\t\t\t\t\treturn f.split();\n\t\t\t\t}\n\t\t\t\tf.text += enc;\n\t\t\t}\n\t\t\t//console.only.i && console.log('writing');\n\t\t\tif(opt.jsonify){ r.write.jsonify(f, rad, cb, o, DBG); return } // temporary testing idea\n\t\t\tif(!Radix.map(rad, f.each, true)){ f.write() }\n\t\t}\n\n\t\tr.write.jsonify = function(f, rad, cb, o, DBG){\n\t\t\tvar raw;\n\t\t\tvar S = +new Date;\n\t\t\tDBG && (DBG.w = S);\n\t\t\ttry{raw = JSON.stringify(rad.$);\n\t\t\t}catch(e){ cb(\"Cannot radisk!\"); return }\n\t\t\tDBG && (DBG.ws = +new Date);\n\t\t\tconsole.STAT && console.STAT(S, +new Date - S, \"rad stringified JSON\");\n\t\t\tif(opt.chunk < raw.length && !o.force){\n\t\t\t\tvar c = 0;\n\t\t\t\tRadix.map(rad, function(){\n\t\t\t\t\tif(c++){ return true } // more than 1 item\n\t\t\t\t});\n\t\t\t\tif(c > 1){\n\t\t\t\t\treturn f.split();\n\t\t\t\t}\n\t\t\t}\n\t\t\tf.text = raw;\n\t\t\tf.write();\n\t\t}\n\n\t\tr.range = function(tree, o){\n\t\t\tif(!tree || !o){ return }\n\t\t\tif(u === o.start && u === o.end){ return tree }\n\t\t\tif(atomic(tree)){ return tree }\n\t\t\tvar sub = Radix();\n\t\t\tRadix.map(tree, function(v,k){ sub(k,v) }, o); // ONLY PLACE THAT TAKES TREE, maybe reduce API for better perf?\n\t\t\treturn sub('');\n\t\t}\n\n\t\t;(function(){\n\t\t\tr.read = function(key, cb, o, DBG){\n\t\t\t\to = o || {};\n\t\t\t\tvar g = {key: key};\n\t\t\t\tg.find = function(file){ var tmp;\n\t\t\t\t\tg.file = file || (file = opt.code.from);\n\t\t\t\t\tDBG && (DBG = DBG[file] = DBG[file] || {});\n\t\t\t\t\tDBG && (DBG.rf = DBG.rf || +new Date);\n\t\t\t\t\tif(tmp = r.disk[g.file = file]){ g.check(u, tmp); return }\n\t\t\t\t\tr.parse(file, g.check, u, DBG);\n\t\t\t\t}\n\t\t\t\tg.get = function(err, disk, info){\n\t\t\t\t\tDBG && (DBG.rgl = +new Date);\n\t\t\t\t\tDBG && (DBG.rg = DBG.rg || +new Date);\n\t\t\t\t\tif(g.err = err || g.err){ cb(err); return }\n\t\t\t\t\tvar file = g.file = (disk||'').file || g.file;\n\t\t\t\t\tif(!disk && file !== opt.code.from){ // corrupt file?\n\t\t\t\t\t\tr.find.bad(file); // remove from dir list\n\t\t\t\t\t\tr.read(key, cb, o); // try again\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tdisk = r.disk[file] || (r.disk[file] = disk);\n\t\t\t\t\tif(!disk){ cb(file === opt.code.from? u : \"No file!\"); return }\n\t\t\t\t\tdisk.file || (disk.file = file);\n\t\t\t\t\tvar data = r.range(disk(key), o);\n\t\t\t\t\tDBG && (DBG.rr = +new Date);\n\t\t\t\t\to.unit = disk.unit;\n\t\t\t\t\to.chunks = (o.chunks || 0) + 1;\n\t\t\t\t\to.parsed = (o.parsed || 0) + ((info||'').parsed||(o.chunks*opt.chunk));\n\t\t\t\t\to.more = 1;\n\t\t\t\t\to.next = u;\n\t\t\t\t\tRadix.map(r.list, function next(v,f){\n\t\t\t\t\t\tif(!v || file === f){ return }\n\t\t\t\t\t\to.next = f;\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}, o.reverse? {reverse: 1, end: file} : {start: file});\n\t\t\t\t\tDBG && (DBG.rl = +new Date);\n\t\t\t\t\tif(!o.next){ o.more = 0 }\n\t\t\t\t\tif(o.next){\n\t\t\t\t\t\tif(!o.reverse && ((key < o.next && 0 != o.next.indexOf(key)) || (u !== o.end && (o.end || '\\uffff') < o.next))){ o.more = 0 }\n\t\t\t\t\t\tif(o.reverse && ((key > o.next && 0 != key.indexOf(o.next)) || ((u !== o.start && (o.start || '') > o.next && file <= o.start)))){ o.more = 0 }\n\t\t\t\t\t}\n\t\t\t\t\t//console.log(5, process.memoryUsage().heapUsed);\n\t\t\t\t\tif(!o.more){ cb(g.err, data, o); return }\n\t\t\t\t\tif(data){ cb(g.err, data, o) }\n\t\t\t\t\tif(o.parsed >= o.limit){ return }\n\t\t\t\t\tvar S = +new Date;\n\t\t\t\t\tDBG && (DBG.rm = S);\n\t\t\t\t\tvar next = o.next;\n\t\t\t\t\ttimediate(function(){\n\t\t\t\t\t\tconsole.STAT && console.STAT(S, +new Date - S, 'rad more');\n\t\t\t\t\t\tr.parse(next, g.check);\n\t\t\t\t\t},0);\n\t\t\t\t}\n\t\t\t\tg.check = function(err, disk, info){\n\t\t\t\t\t//console.log(4, process.memoryUsage().heapUsed);\n\t\t\t\t\tg.get(err, disk, info);\n\t\t\t\t\tif(!disk || disk.check){ return } disk.check = 1;\n\t\t\t\t\tvar S = +new Date;\n\t\t\t\t\t(info || (info = {})).file || (info.file = g.file);\n\t\t\t\t\tRadix.map(disk, function(val, key){\n\t\t\t\t\t\t// assume in memory for now, since both write/read already call r.find which will init it.\n\t\t\t\t\t\tr.find(key, function(file){\n\t\t\t\t\t\t\tif((file || (file = opt.code.from)) === info.file){ return }\n\t\t\t\t\t\t\tvar id = (''+Math.random()).slice(-3);\n\t\t\t\t\t\t\tpuff(function(){\n\t\t\t\t\t\t\tr.save(key, val, function ack(err, ok){\n\t\t\t\t\t\t\t\tif(err){ r.save(key, val, ack); return } // ad infinitum???\n\t\t\t\t\t\t\t\t// TODO: NOTE!!! Mislocated data could be because of a synchronous `put` from the `g.get(` other than perf shouldn't we do the check first before acking?\n\t\t\t\t\t\t\t\tconsole.STAT && console.STAT(\"MISLOCATED DATA CORRECTED\", id, ename(key), ename(info.file), ename(file));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t},0);\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\t\tconsole.STAT && console.STAT(S, +new Date - S, \"rad check\");\n\t\t\t\t}\n\t\t\t\tr.find(key || (o.reverse? (o.end||'') : (o.start||'')), g.find); \n\t\t\t}\n\t\t\tfunction rev(a,b){ return b }\n\t\t\tvar revo = {reverse: true};\n\t\t}());\n\n\t\t;(function(){\n\t\t\t/*\n\t\t\t\tLet us start by assuming we are the only process that is\n\t\t\t\tchanging the directory or bucket. Not because we do not want\n\t\t\t\tto be multi-process/machine, but because we want to experiment\n\t\t\t\twith how much performance and scale we can get out of only one.\n\t\t\t\tThen we can work on the harder problem of being multi-process.\n\t\t\t*/\n\t\t\tvar RPC = 0;\n\t\t\tvar Q = {}, s = String.fromCharCode(31);\n\t\t\tr.parse = function(file, cb, raw, DBG){ var q;\n\t\t\t\tif(!file){ return cb(); }\n\t\t\t\tif(q = Q[file]){ q.push(cb); return } q = Q[file] = [cb];\n\t\t\t\tvar p = function Parse(){}, info = {file: file};\n\t\t\t\t(p.disk = Radix()).file = file;\n\t\t\t\tp.read = function(err, data){ var tmp;\n\t\t\t\t\tDBG && (DBG.rpg = +new Date);\n\t\t\t\t\tconsole.STAT && console.STAT(S, +new Date - S, 'read disk', JSON.stringify(file), ++RPC, 'total all parses.');\n\t\t\t\t\t//console.log(2, process.memoryUsage().heapUsed);\n\t\t\t\t\tif((p.err = err) || (p.not = !data)){\n\t\t\t\t\t\tdelete Q[file];\n\t\t\t\t\t\tp.map(q, p.ack);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif('string' !== typeof data){\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tif(opt.max <= data.length){\n\t\t\t\t\t\t\t\tp.err = \"Chunk too big!\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdata = data.toString(); // If it crashes, it crashes here. How!?? We check size first!\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}catch(e){ p.err = e }\n\t\t\t\t\t\tif(p.err){\n\t\t\t\t\t\t\tdelete Q[file];\n\t\t\t\t\t\t\tp.map(q, p.ack);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tinfo.parsed = data.length;\n\t\t\t\t\tDBG && (DBG.rpl = info.parsed);\n\t\t\t\t\tDBG && (DBG.rpa = q.length);\n\t\t\t\t\tS = +new Date;\n\t\t\t\t\tif(!(opt.jsonify || '{' === data[0])){\n\t\t\t\t\t\tp.radec(err, data);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tparse(data, function(err, tree){\n\t\t\t\t\t\t//console.log(3, process.memoryUsage().heapUsed);\n\t\t\t\t\t\tif(!err){\n\t\t\t\t\t\t\tdelete Q[file];\n\t\t\t\t\t\t\tp.disk.$ = tree;\n\t\t\t\t\t\t\tconsole.STAT && (ST = +new Date - S) > 9 && console.STAT(S, ST, 'rad parsed JSON');\n\t\t\t\t\t\t\tDBG && (DBG.rpd = +new Date);\n\t\t\t\t\t\t\tp.map(q, p.ack); // hmmm, v8 profiler can't see into this cause of try/catch?\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif('{' === data[0]){\n\t\t\t\t\t\t\tdelete Q[file];\n\t\t\t\t\t\t\tp.err = tmp || \"JSON error!\";\n\t\t\t\t\t\t\tp.map(q, p.ack);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tp.radec(err, data);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tp.map = function(){ // switch to setTimeout.each now?\n\t\t\t\t\tif(!q || !q.length){ return }\n\t\t\t\t\t//var i = 0, l = q.length, ack;\n\t\t\t\t\tvar S = +new Date;\n\t\t\t\t\tvar err = p.err, data = p.not? u : p.disk;\n\t\t\t\t\tvar i = 0, ack; while(i < 9 && (ack = q[i++])){ ack(err, data, info) } // too much?\n\t\t\t\t\tconsole.STAT && console.STAT(S, +new Date - S, 'rad packs', ename(file));\n\t\t\t\t\tconsole.STAT && console.STAT(S, i, 'rad packs #', ename(file)); \n\t\t\t\t\tif(!(q = q.slice(i)).length){ return }\n\t\t\t\t\tpuff(p.map, 0);\n\t\t\t\t}\n\t\t\t\tp.ack = function(cb){\n\t\t\t\t\tif(!cb){ return }\n\t\t\t\t\tif(p.err || p.not){\n\t\t\t\t\t\tcb(p.err, u, info);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tcb(u, p.disk, info);\n\t\t\t\t}\n\t\t\t\tp.radec = function(err, data){\n\t\t\t\t\tdelete Q[file];\n\t\t\t\t\tS = +new Date;\n\t\t\t\t\tvar tmp = p.split(data), pre = [], i, k, v;\n\t\t\t\t\tif(!tmp || 0 !== tmp[1]){\n\t\t\t\t\t\tp.err = \"File '\"+file+\"' does not have root radix! \";\n\t\t\t\t\t\tp.map(q, p.ack);\n\t\t\t\t\t\treturn; \n\t\t\t\t\t}\n\t\t\t\t\twhile(tmp){\n\t\t\t\t\t\tk = v = u;\n\t\t\t\t\t\ti = tmp[1];\n\t\t\t\t\t\ttmp = p.split(tmp[2])||'';\n\t\t\t\t\t\tif('#' == tmp[0]){\n\t\t\t\t\t\t\tk = tmp[1];\n\t\t\t\t\t\t\tpre = pre.slice(0,i);\n\t\t\t\t\t\t\tif(i <= pre.length){\n\t\t\t\t\t\t\t\tpre.push(k);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttmp = p.split(tmp[2])||'';\n\t\t\t\t\t\tif('\\n' == tmp[0]){ continue }\n\t\t\t\t\t\tif('=' == tmp[0] || ':' == tmp[0]){ v = tmp[1] }\n\t\t\t\t\t\tif(u !== k && u !== v){ p.disk(pre.join(''), v) }\n\t\t\t\t\t\ttmp = p.split(tmp[2]);\n\t\t\t\t\t}\n\t\t\t\t\tconsole.STAT && console.STAT(S, +new Date - S, 'parsed RAD');\n\t\t\t\t\tp.map(q, p.ack);\n\t\t\t\t};\n\t\t\t\tp.split = function(t){\n\t\t\t\t\tif(!t){ return }\n\t\t\t\t\tvar l = [], o = {}, i = -1, a = '', b, c;\n\t\t\t\t\ti = t.indexOf(s);\n\t\t\t\t\tif(!t[i]){ return }\n\t\t\t\t\ta = t.slice(0, i);\n\t\t\t\t\tl[0] = a;\n\t\t\t\t\tl[1] = b = Radisk.decode(t.slice(i), o);\n\t\t\t\t\tl[2] = t.slice(i + o.i);\n\t\t\t\t\treturn l;\n\t\t\t\t}\n\t\t\t\tif(r.disk){ raw || (raw = (r.disk[file]||'').raw) }\n\t\t\t\tvar S = +new Date, SM, SL;\n\t\t\t\tDBG && (DBG.rp = S);\n\t\t\t\tif(raw){ return puff(function(){ p.read(u, raw) }, 0) }\n\t\t\t\topt.store.get(ename(file), p.read);\n\t\t\t\t// TODO: What if memory disk gets filled with updates, and we get an old one back?\n\t\t\t}\n\t\t}());\n\n\t\t;(function(){\n\t\t\tvar dir, f = String.fromCharCode(28), Q;\n\t\t\tr.find = function(key, cb){\n\t\t\t\tif(!dir){\n\t\t\t\t\tif(Q){ Q.push([key, cb]); return } Q = [[key, cb]];\n\t\t\t\t\tr.parse(f, init);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tRadix.map(r.list = dir, function(val, key){\n\t\t\t\t\tif(!val){ return }\n\t\t\t\t\treturn cb(key) || true;\n\t\t\t\t}, {reverse: 1, end: key}) || cb(opt.code.from);\n\t\t\t}\n\t\t\tr.find.add = function(file, cb){\n\t\t\t\tvar has = dir(file);\n\t\t\t\tif(has || file === f){ cb(u, 1); return }\n\t\t\t\tdir(file, 1);\n\t\t\t\tcb.found = (cb.found || 0) + 1;\n\t\t\t\tr.write(f, dir, function(err, ok){\n\t\t\t\t\tif(err){ cb(err); return }\n\t\t\t\t\tcb.found = (cb.found || 0) - 1;\n\t\t\t\t\tif(0 !== cb.found){ return }\n\t\t\t\t\tcb(u, 1);\n\t\t\t\t}, true);\n\t\t\t}\n\t\t\tr.find.bad = function(file, cb){\n\t\t\t\tdir(file, 0);\n\t\t\t\tr.write(f, dir, cb||noop);\n\t\t\t}\n\t\t\tfunction init(err, disk){\n\t\t\t\tif(err){\n\t\t\t\t\topt.log('list', err);\n\t\t\t\t\tsetTimeout(function(){ r.parse(f, init) }, 1000);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(disk){ drain(disk); return }\n\t\t\t\tdir = dir || disk || Radix();\n\t\t\t\tif(!opt.store.list){ drain(dir); return }\n\t\t\t\t// import directory.\n\t\t\t\topt.store.list(function(file){\n\t\t\t\t\tif(!file){ drain(dir); return }\n\t\t\t\t\tr.find.add(file, noop);\n\t\t\t\t});\n\t\t\t}\n\t\t\tfunction drain(rad, tmp){\n\t\t\t\tdir = dir || rad;\n\t\t\t\tdir.file = f;\n\t\t\t\ttmp = Q; Q = null;\n\t\t\t\tmap(tmp, function(arg){\n\t\t\t\t\tr.find(arg[0], arg[1]);\n\t\t\t\t});\n\t\t\t}\n\t\t}());\n\n\t\ttry{ !Gun.window && require('./radmigtmp')(r) }catch(e){}\n\n\t\tvar noop = function(){}, RAD, u;\n\t\tRadisk.has[opt.file] = r;\n\t\treturn r;\n\t}\n\n\t;(function(){\n\t\tvar _ = String.fromCharCode(31), u;\n\t\tRadisk.encode = function(d, o, s){ s = s || _;\n\t\t\tvar t = s, tmp;\n\t\t\tif(typeof d == 'string'){\n\t\t\t\tvar i = d.indexOf(s);\n\t\t\t\twhile(i != -1){ t += s; i = d.indexOf(s, i+1) }\n\t\t\t\treturn t + '\"' + d + s;\n\t\t\t} else\n\t\t\tif(d && d['#'] && 1 == Object.keys(d).length){\n\t\t\t\treturn t + '#' + tmp + t;\n\t\t\t} else\n\t\t\tif('number' == typeof d){\n\t\t\t\treturn t + '+' + (d||0) + t;\n\t\t\t} else\n\t\t\tif(null === d){\n\t\t\t\treturn t + ' ' + t;\n\t\t\t} else\n\t\t\tif(true === d){\n\t\t\t\treturn t + '+' + t;\n\t\t\t} else\n\t\t\tif(false === d){\n\t\t\t\treturn t + '-' + t;\n\t\t\t}// else\n\t\t\t//if(binary){}\n\t\t}\n\t\tRadisk.decode = function(t, o, s){ s = s || _;\n\t\t\tvar d = '', i = -1, n = 0, c, p;\n\t\t\tif(s !== t[0]){ return }\n\t\t\twhile(s === t[++i]){ ++n }\n\t\t\tp = t[c = n] || true;\n\t\t\twhile(--n >= 0){ i = t.indexOf(s, i+1) }\n\t\t\tif(i == -1){ i = t.length }\n\t\t\td = t.slice(c+1, i);\n\t\t\tif(o){ o.i = i+1 }\n\t\t\tif('\"' === p){\n\t\t\t\treturn d;\n\t\t\t} else\n\t\t\tif('#' === p){\n\t\t\t\treturn {'#':d};\n\t\t\t} else\n\t\t\tif('+' === p){\n\t\t\t\tif(0 === d.length){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn parseFloat(d);\n\t\t\t} else\n\t\t\tif(' ' === p){\n\t\t\t\treturn null;\n\t\t\t} else\n\t\t\tif('-' === p){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}());\n\n\tif(typeof window !== \"undefined\"){\n\t  var Gun = window.Gun;\n\t  var Radix = window.Radix;\n\t  window.Radisk = Radisk;\n\t} else { \n\t  var Gun = require('../gun');\n\t\tvar Radix = require('./radix');\n\t\t//var Radix = require('./radix2'); Radisk = require('./radisk2');\n\t\ttry{ module.exports = Radisk }catch(e){}\n\t}\n\n\tRadisk.Radix = Radix;\n\n}());"],
  "mappings": "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",
  "names": []
}

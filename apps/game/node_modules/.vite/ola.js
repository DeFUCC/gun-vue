import {
  __commonJS
} from "./chunk-LGO6YHUG.js";

// ../../node_modules/.pnpm/ola@1.2.1/node_modules/ola/ola.min.js
var require_ola_min = __commonJS({
  "../../node_modules/.pnpm/ola@1.2.1/node_modules/ola/ola.min.js"(exports, module) {
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global = global || self, global.Ola = factory());
    })(exports, function() {
      "use strict";
      const position = (x0, v0, t1, t) => {
        const a = (v0 * t1 + 2 * x0) / t1 ** 3;
        const b = -(2 * v0 * t1 + 3 * x0) / t1 ** 2;
        const c = v0;
        const d = x0;
        return a * t ** 3 + b * t ** 2 + c * t + d;
      };
      const speed = (x0, v0, t1, t) => {
        const a = (v0 * t1 + 2 * x0) / t1 ** 3;
        const b = -(2 * v0 * t1 + 3 * x0) / t1 ** 2;
        const c = v0;
        return 3 * a * t ** 2 + 2 * b * t + c;
      };
      const each = function(values, cb) {
        const multi = typeof values === "number" ? { value: values } : values;
        Object.entries(multi).map(([key, value]) => cb(value, key));
      };
      function Single(init, time) {
        this.start = new Date() / 1e3;
        this.time = time;
        this.from = init;
        this.current = init;
        this.to = init;
        this.speed = 0;
      }
      Single.prototype.get = function(now) {
        const t = now / 1e3 - this.start;
        if (t < 0) {
          throw new Error("Cannot read in the past");
        }
        if (t >= this.time) {
          return this.to;
        }
        return this.to - position(this.to - this.from, this.speed, this.time, t);
      };
      Single.prototype.getSpeed = function(now) {
        const t = now / 1e3 - this.start;
        if (t >= this.time) {
          return 0;
        }
        return speed(this.to - this.from, this.speed, this.time, t);
      };
      Single.prototype.set = function(value, time) {
        const now = new Date();
        const current = this.get(now);
        this.speed = this.getSpeed(now);
        this.start = now / 1e3;
        this.from = current;
        this.to = value;
        if (time) {
          this.time = time;
        }
        return current;
      };
      function Ola(values, time = 300) {
        if (typeof values === "number") {
          values = { value: values };
        }
        each(values, (init, key) => {
          const value = new Single(init, time / 1e3);
          Object.defineProperty(values, "_" + key, { value });
          Object.defineProperty(values, "$" + key, { get: () => value.to });
          Object.defineProperty(values, key, { get: () => value.get(new Date()), set: (val) => value.set(val), enumerable: true });
        });
        Object.defineProperty(values, "get", { get: () => function(name = "value", now = new Date()) {
          return this["_" + name].get(now);
        } });
        Object.defineProperty(values, "set", { get: () => function(values2, time2 = 0) {
          each(values2, (value, key) => {
            this["_" + key].set(value, time2 / 1e3);
          });
        } });
        return values;
      }
      return Ola;
    });
  }
});

// dep:ola
var ola_default = require_ola_min();
export {
  ola_default as default
};
//# sourceMappingURL=ola.js.map
